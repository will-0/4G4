diff --git a/Code/.ipynb_checkpoints/NN_for_Iris-checkpoint.ipynb b/Code/.ipynb_checkpoints/NN_for_Iris-checkpoint.ipynb
deleted file mode 100644
index 9bd557e..0000000
--- a/Code/.ipynb_checkpoints/NN_for_Iris-checkpoint.ipynb
+++ /dev/null
@@ -1,541 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "markdown",
-   "metadata": {
-    "colab_type": "text",
-    "id": "anT-jJ1cj4K5"
-   },
-   "source": [
-    "# ** Neural Network for Iris Dataset **"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {
-    "colab_type": "text",
-    "id": "w2tkSsPlkBgX"
-   },
-   "source": [
-    "NN for the Iris dataset using keras and backpropagation"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 1,
-   "metadata": {
-    "colab": {
-     "base_uri": "https://localhost:8080/",
-     "height": 408
-    },
-    "colab_type": "code",
-    "id": "gxg1ynUvkd8Z",
-    "outputId": "2b44999e-6dc3-4aa9-a24a-f3138da36914"
-   },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "2.0.0\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Using TensorFlow backend.\n"
-     ]
-    }
-   ],
-   "source": [
-    "%matplotlib inline\n",
-    "from matplotlib import pyplot as plt\n",
-    "import numpy as np\n",
-    "\n",
-    "import pandas as pd\n",
-    "\n",
-    "import tensorflow as tf\n",
-    "\n",
-    "from tensorflow import keras\n",
-    "from tensorflow.keras import layers\n",
-    "\n",
-    "import tensorflow_docs as tfdocs\n",
-    "import tensorflow_docs.plots\n",
-    "import tensorflow_docs.modeling\n",
-    "\n",
-    "print(tf.__version__)\n",
-    "\n",
-    "from IPython.display import SVG\n",
-    "from keras.utils import model_to_dot\n",
-    "import pydot\n",
-    "\n",
-    "from sklearn.datasets import load_iris\n",
-    "from sklearn.model_selection import train_test_split\n",
-    "from sklearn.preprocessing import OneHotEncoder, StandardScaler"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 2,
-   "metadata": {
-    "colab": {},
-    "colab_type": "code",
-    "id": "LyAVoO0ZkmKL"
-   },
-   "outputs": [],
-   "source": [
-    "# Weights and biases to track the hyperparameters\n",
-    "# import wandb\n",
-    "# wandb.init(project=\"nn-testing\")\n",
-    "# from wandb.keras import WandbCallback\n",
-    "# wandb.init(config={\"hyper\": \"parameter\"})"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "metadata": {
-    "colab": {
-     "base_uri": "https://localhost:8080/",
-     "height": 1000
-    },
-    "colab_type": "code",
-    "id": "QcyChPPikpu3",
-    "outputId": "0af0a79f-f6a2-475f-d580-0f43e9342cfd"
-   },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "X_train shape = (120, 4)\n",
-      "Y_train shape = (120, 3)\n",
-      "X_test shape = (30, 4)\n",
-      "Y_test shape = (30, 3)\n"
-     ]
-    }
-   ],
-   "source": [
-    "iris = load_iris()\n",
-    "X = iris['data'] # array of samples 4 dimensions each describing a feature\n",
-    "y = iris['target'] # array of labels (0, 1, 2)\n",
-    "names = iris['target_names'] # array of labels (0, 1, 2)\n",
-    "feature_names = iris['feature_names'] # ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']\n",
-    "\n",
-    "# One hot encoding\n",
-    "enc = OneHotEncoder()\n",
-    "Y = enc.fit_transform(y[:, np.newaxis]).toarray() # Y is output of 3 dimensions now, one hot encoding\n",
-    "\n",
-    "# Scale data to have mean 0 and variance 1 \n",
-    "# which is importance for convergence of the neural network\n",
-    "scaler = StandardScaler()\n",
-    "X_scaled = scaler.fit_transform(X)\n",
-    "\n",
-    "# Split the data set into training and testing\n",
-    "X_train, X_test, Y_train, Y_test = train_test_split(X_scaled, Y, test_size=0.2, random_state=2)\n",
-    "print(\"X_train shape = {}\".format(X_train.shape))\n",
-    "print(\"Y_train shape = {}\".format(Y_train.shape))\n",
-    "print(\"X_test shape = {}\".format(X_test.shape))\n",
-    "print(\"Y_test shape = {}\".format(Y_test.shape))\n",
-    "\n",
-    "n_features = X.shape[1]\n",
-    "n_classes = Y.shape[1]"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Model: \"sequential\"\n",
-      "_________________________________________________________________\n",
-      "Layer (type)                 Output Shape              Param #   \n",
-      "=================================================================\n",
-      "dense (Dense)                (None, 10)                50        \n",
-      "_________________________________________________________________\n",
-      "dense_1 (Dense)              (None, 10)                110       \n",
-      "_________________________________________________________________\n",
-      "dense_2 (Dense)              (None, 3)                 33        \n",
-      "=================================================================\n",
-      "Total params: 193\n",
-      "Trainable params: 193\n",
-      "Non-trainable params: 0\n",
-      "_________________________________________________________________\n"
-     ]
-    }
-   ],
-   "source": [
-    "def build_model():\n",
-    "    model = keras.Sequential([\n",
-    "    tf.keras.layers.Dense(10, activation=tf.nn.relu, input_shape=(4,)),  # input shape required\n",
-    "    tf.keras.layers.Dense(10, activation=tf.nn.relu),\n",
-    "    tf.keras.layers.Dense(3)\n",
-    "    ])\n",
-    "\n",
-    "    optimizer = tf.keras.optimizers.RMSprop(0.001)\n",
-    "\n",
-    "    model.compile(loss='mse',\n",
-    "                optimizer=optimizer,\n",
-    "                metrics=['mae', 'mse'])\n",
-    "    return model\n",
-    "\n",
-    "model = build_model()\n",
-    "\n",
-    "# The patience parameter is the amount of epochs to check for improvement\n",
-    "early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=15)\n",
-    "\n",
-    "model.summary()"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "## Train the full model\n",
-    "\n",
-    "#### Epochs\n",
-    "This is the number of times the network trains forwards and backwards, we will leave this as a high number as we implement early stopping.\n",
-    "\n",
-    "#### History\n",
-    "History saves the model fitting data allowing us to plot and visualise it.\n",
-    "\n",
-    "#### Validation split\n",
-    "The validation split: If you set the validation_split argument in model.fit to e.g. 0.1, then the validation data used will be the last 10% of the data. Note that the data isn't shuffled before extracting the validation split, so the validation is literally just the last x% of samples in the input you passed. Used to validate as you train."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 5,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "\n",
-      "Epoch: 0, loss:0.3552,  mae:0.4449,  mse:0.3552,  val_loss:0.3106,  val_mae:0.4218,  val_mse:0.3106,  \n",
-      ".................................................."
-     ]
-    }
-   ],
-   "source": [
-    "EPOCHS = 50\n",
-    "\n",
-    "history = model.fit(X_train, Y_train, epochs=EPOCHS, batch_size = 32, validation_split = 0.2,\n",
-    "                    verbose=0 , callbacks=[ tfdocs.modeling.EpochDots()] )"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "History is a dataframe, we can print the tail of this for the last 5 epochs to see what data we collect at each epoch."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 6,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/html": [
-       "<div>\n",
-       "<style scoped>\n",
-       "    .dataframe tbody tr th:only-of-type {\n",
-       "        vertical-align: middle;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe tbody tr th {\n",
-       "        vertical-align: top;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe thead th {\n",
-       "        text-align: right;\n",
-       "    }\n",
-       "</style>\n",
-       "<table border=\"1\" class=\"dataframe\">\n",
-       "  <thead>\n",
-       "    <tr style=\"text-align: right;\">\n",
-       "      <th></th>\n",
-       "      <th>loss</th>\n",
-       "      <th>mae</th>\n",
-       "      <th>mse</th>\n",
-       "      <th>val_loss</th>\n",
-       "      <th>val_mae</th>\n",
-       "      <th>val_mse</th>\n",
-       "      <th>epoch</th>\n",
-       "    </tr>\n",
-       "  </thead>\n",
-       "  <tbody>\n",
-       "    <tr>\n",
-       "      <th>45</th>\n",
-       "      <td>0.117777</td>\n",
-       "      <td>0.257023</td>\n",
-       "      <td>0.117777</td>\n",
-       "      <td>0.092239</td>\n",
-       "      <td>0.208415</td>\n",
-       "      <td>0.092239</td>\n",
-       "      <td>45</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>46</th>\n",
-       "      <td>0.114680</td>\n",
-       "      <td>0.252097</td>\n",
-       "      <td>0.114680</td>\n",
-       "      <td>0.089758</td>\n",
-       "      <td>0.206136</td>\n",
-       "      <td>0.089758</td>\n",
-       "      <td>46</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>47</th>\n",
-       "      <td>0.111747</td>\n",
-       "      <td>0.248481</td>\n",
-       "      <td>0.111747</td>\n",
-       "      <td>0.087579</td>\n",
-       "      <td>0.203247</td>\n",
-       "      <td>0.087579</td>\n",
-       "      <td>47</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>48</th>\n",
-       "      <td>0.108773</td>\n",
-       "      <td>0.245302</td>\n",
-       "      <td>0.108773</td>\n",
-       "      <td>0.085466</td>\n",
-       "      <td>0.200040</td>\n",
-       "      <td>0.085466</td>\n",
-       "      <td>48</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>49</th>\n",
-       "      <td>0.106350</td>\n",
-       "      <td>0.241870</td>\n",
-       "      <td>0.106350</td>\n",
-       "      <td>0.083247</td>\n",
-       "      <td>0.198502</td>\n",
-       "      <td>0.083247</td>\n",
-       "      <td>49</td>\n",
-       "    </tr>\n",
-       "  </tbody>\n",
-       "</table>\n",
-       "</div>"
-      ],
-      "text/plain": [
-       "        loss       mae       mse  val_loss   val_mae   val_mse  epoch\n",
-       "45  0.117777  0.257023  0.117777  0.092239  0.208415  0.092239     45\n",
-       "46  0.114680  0.252097  0.114680  0.089758  0.206136  0.089758     46\n",
-       "47  0.111747  0.248481  0.111747  0.087579  0.203247  0.087579     47\n",
-       "48  0.108773  0.245302  0.108773  0.085466  0.200040  0.085466     48\n",
-       "49  0.106350  0.241870  0.106350  0.083247  0.198502  0.083247     49"
-      ]
-     },
-     "execution_count": 6,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "hist = pd.DataFrame(history.history)\n",
-    "hist['epoch'] = history.epoch\n",
-    "hist.tail()"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "We can plot the mean absolute error for the training data and the validation data. When the validation data levels off our model is no longer improving."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 7,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "Text(0, 0.5, 'MSE')"
-      ]
-     },
-     "execution_count": 7,
-     "metadata": {},
-     "output_type": "execute_result"
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "plotter = tfdocs.plots.HistoryPlotter(smoothing_std=2)\n",
-    "\n",
-    "plotter.plot({'Basic': history}, metric = \"mae\")\n",
-    "# plt.ylim([0, 1])\n",
-    "plt.ylabel('MAE')\n",
-    "\n",
-    "plt.figure()\n",
-    "plotter.plot({'Basic': history}, metric = \"mse\")\n",
-    "# plt.ylim([0, 1])\n",
-    "plt.ylabel('MSE')\n",
-    "plt.save('Images/epochs_mse_Iris_BP.jpg')"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "## Testing the model"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "We now used this learnt model to predict outputs using our test inputs.\n",
-    "\n",
-    "We note that y_test are the real output values that match the inputs X_test."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 8,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "test_predictions shape = (30, 3)\n"
-     ]
-    }
-   ],
-   "source": [
-    "test_predictions = model.predict(X_test)\n",
-    "print(\"test_predictions shape = {}\".format(test_predictions.shape))"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "### Evaluate the model's effectiveness\n",
-    "\n",
-    "Now that the model is trained, we can get some statistics on its performance.\n",
-    "\n",
-    "Evaluating means determining how effectively the model makes predictions. To determine the model's effectiveness at Iris classification, pass some sepal and petal measurements to the model and ask the model to predict what Iris species they represent. Then compare the model's predictions against the actual label. For example, a model that picked the correct species on half the input examples has an accuracy of 0.5."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 9,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "<matplotlib.legend.Legend at 0x1486ec1d0>"
-      ]
-     },
-     "execution_count": 9,
-     "metadata": {},
-     "output_type": "execute_result"
-    },
-    {
-     "data": {
-      "image/png": "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cP78ed544w3uuOMOAHbu3MnBgwd599136enpobu7m7feeguA559/nu7ubrq6uti0aRPDw8NhgkBzkkSkhBqqPiyoPXXbbC9GXpAQ/QklVCwh8qu8VJ6sisRPP/2U5cuXc/nll3PkyBFuu+02ICmSdu7cyYoVK1i5ciUHDhzg4MGDAGzatIkbb7yRm2++mYGBgbH2EFQkiUjJtLf2UcupCW21nKK9tS//Y2R7MfKChOhPbLGEyK/yUnmyKhIvuugienp66O/vx93ZvHkzkEwNevzxx+np6aGnp4f333+f+++/nzfffJPXX3+dd955h3379rFixQo+++yz4oIYL+0cXLGL5iSJSL461u32xqoBN857Y9XArCbzZjGBdLZC9Ce2WELkV3mJX2xzkvbu3esNDQ3++eef+2uvveY33XSTnzx50t3dBwcH/ciRI/7KK6/47bff7u7uvb29vnDhQt+1a5e7h5mTZMm6sFpaWryrqyv4cUVERCQbvb29LFu2LO/tOzuTOUiHDiWfILW3w733FhdDXV0dIyMjY49XrVrF6tWrue+++9i4cSPPPffc2HYdHR3U19dz11130dfXxzXXXMOJEydoa2vj1ltvpampia6uLpYsWTJjP82s291bLoxHRZKIiIgUXCSVq0KKJM1JEhEREUmhIklEREQkhYokERERAZIvc1WyQvunIklERESoqalheHi4Ygsld2d4eJiampq896nOMB4REREpE/X19QwODjI0NFTqUDJTU1NDfX193turSBIRERHmz5/P1VdfXeowoqLTbSIiIiIpVCSJiIiIpFCRJCIiIpJCRZKIiIhIChVJIiIiIilUJImIiIikUJEkIiIikkJFkoiIiEgKFUkiIiIiKfIqkszsu2b2P2b2vpn9XdZBTafzgbdpqh5kno3SVD1I5wNvl+QYoYSKpRL7FIuYXqNKjCUmldgniVtM7+lQYoqlaO4+7QJUAb8HvgksAPYB1023T3Nzs2ehY91ur2XEwceWWka8Y93uOT1GKKFiqcQ+xSKm16gSY4lJJfZJ4hbTezqUmGIpBNDlaTVQWuOEDeA7wGvjHj8OPD7dPlkVSY1VAxMS/8XSWDUwp8cIJVQsldinWMT0GlViLDGpxD5J3GJ6T4cSUyyFmKpIsmTd1Mzs+8B33f2vc4/vA/7I3R+6YLtWoBWgoaGhub+/P9BnXV+aZ6N4yhlCY5RRz296VYhjhBIqlkrsUyxieo0qMZaYVGKfJG4xvadDiSmWQphZt7u3XNgeLGJ33+buLe7esnTp0lCHnaCh6sOC2rM6RiihYqnEPsUipteoEmOJSSX2SeIW03s6lJhiCSGfIukwcNW4x/W5tjnX3tpHLacmtNVyivbWvjk9RiihYqnEPsUipteoEmOJSSX2SeIW03s6lJhiCSGf023VwP8Cf0pSHO0B7nH396bZZwgIf74NqONrDWf4xtLPWcB8zrKQD4dGGD4018cIJVQsgfu0BDg2y32jym8IMb1GlRhLYBq72SoqvzJZTO/pUGKKZZyZxm6ju086DVY901Hd/ZyZPQS8RvJNt+enK5By+2Rzvm0cM+s6m3L+UIpnZl1p52YlDI3d7GjsZkv5zY7+LmRrtmN3xiIJwN1/Afyi4KhEREREylS8U81FRERESqici6RtpQ6ggim32VJ+s6PcZkv5zY5ym61Z5XfGidsiIiIiX0Xl/EmSiIiISGbKrkiK6WK7lcjM+szst2bWY2ZdpY6n3JnZ82Z21Mx+N65tsZn90swO5m4vK2WM5WqK3LaZ2eHc+O0xs++VMsZyZWZXmdkuM9tvZu+Z2SO5do3dAKbJr8ZvkcysxszeNbN9udz+Y679ajP7da52eMnMFuR1vHI63WZmVSS/2XQbMEjym00/cPf9JQ2sgphZH9Di7votlADM7I+BEeDf3f36XNtTwHF3/+dcoX+Zu/+olHGWoyly2waMuPvTpYyt3JnZFcAV7r7XzC4GuoG7gL9CY7do0+R3NRq/RTEzAxa5+4iZzQfeBh4BHgN2uPuLZvavwD533zLT8crtk6SbgPfd/QN3Pwu8CNxZ4phEpuTubwHHL2i+E3ghd/8Fkj+OUqApcisBuPtH7r43d/8k0AtcicZuENPkV4qUu17tSO7h/NziwJ8AP8u15z12y61IuhIYGPd4EA2s0BzYaWbduYsWS3hfd/ePcvf/D/h6KYOpQA+Z2W9yp+N0OqhIZtYErAB+jcZucBfkFzR+i2ZmVWbWAxwFfgn8Hjjh7udym+RdO5RbkSTZu8XdVwJ/DjyYO6UhGfHkfHf5nPOO3xbgD4DlwEfAM6UNp7yZWR3wMvCou38yfp3GbvFS8qvxG4C7n3f35STXmr0JuHa2xyq3Iimai+1WKnc/nLs9CvwnyQCTsI7k5iR8MTfhaInjqRjufiT3B3IU+Dc0fmctN5/jZaDT3XfkmjV2A0nLr8ZvWO5+AtgFfAe4NHctWiigdii3ImkP8O3cLPUFwF8APy9xTBXDzBblJhFiZouAPwN+N/1eMgs/B36Yu/9D4NUSxlJRvvgHPOduNH5nJTf5dTvQ6+4/HrdKYzeAqfKr8Vs8M1tqZpfm7l9E8kWvXpJi6fu5zfIeu2X17TaA3Fci/4UvL7bbXuKQKoaZfZPk0yNIruv3E+W3OGb2H8CtJFegPgL8A/AK8FOgAegHVru7JiAXaIrc3kpyqsKBPuBvxs2hkTyZ2S3AbuC3wGiu+e9J5s1o7BZpmvz+AI3fopjZH5JMzK4i+SDop+7+T7l/314EFgP/Dfylu5+Z8XjlViSJiIiIzIVyO90mIiIiMidUJImIiIikUJEkIiIikkJFkoiIiEgKFUkiIiIiKVQkiYiIiKRQkSQiIiKSQkWSiIiISIr/B1hVs2c+QUTwAAAAAElFTkSuQmCC\n",
-      "text/plain": [
-       "<Figure size 720x72 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "NN_output_args = np.argmax(test_predictions, axis = 1)\n",
-    "real_output_args = np.argmax(Y_test, axis = 1)\n",
-    "\n",
-    "plt.figure(figsize = (10,1))\n",
-    "plt.plot(NN_output_args,'ro', label = \"NN\")\n",
-    "plt.plot(real_output_args, 'bo', label = \"Real\")\n",
-    "plt.legend()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 10,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Test set accuracy: 90.000%\n"
-     ]
-    }
-   ],
-   "source": [
-    "test_accuracy = tf.keras.metrics.Accuracy()\n",
-    "\n",
-    "test_accuracy(NN_output_args, real_output_args)\n",
-    "print(\"Test set accuracy: {:.3%}\".format(test_accuracy.result()))"
-   ]
-  }
- ],
- "metadata": {
-  "colab": {
-   "collapsed_sections": [],
-   "name": "NN for Iris.ipynb",
-   "provenance": []
-  },
-  "kernelspec": {
-   "display_name": "Python 3",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.7.4"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 1
-}
diff --git a/Code/50_part_100_iters_tcurve.npy b/Code/50_part_100_iters_tcurve.npy
deleted file mode 100644
index 8031e63..0000000
Binary files a/Code/50_part_100_iters_tcurve.npy and /dev/null differ
diff --git a/Code/Getting weights from Keras.ipynb b/Code/Getting weights from Keras.ipynb
deleted file mode 100644
index cbbe6cf..0000000
--- a/Code/Getting weights from Keras.ipynb	
+++ /dev/null
@@ -1,335 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "# Using Keras\n",
-    "\n",
-    "This is some example code of how we can get the code in Keras, adapted from https://machinelearningmastery.com/tutorial-first-neural-network-python-keras/."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "import numpy as np\n",
-    "from numpy import loadtxt\n",
-    "from tensorflow.keras.models import Sequential\n",
-    "from tensorflow.keras.layers import Dense"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 5,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "#an example dataset from the Keras tutorial\n",
-    "dataset = loadtxt('pima_indians.csv', delimiter=',')\n",
-    "# split into input (X) and output (y) variables\n",
-    "X = dataset[:,0:8]\n",
-    "y = dataset[:,8]"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 6,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# define the keras model\n",
-    "from tensorflow.keras.models import Sequential\n",
-    "model = Sequential()\n",
-    "model.add(Dense(12, input_dim=8, activation='relu'))\n",
-    "model.add(Dense(8, activation='relu'))\n",
-    "model.add(Dense(1, activation='sigmoid'))"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "### Compilation\n",
-    "\n",
-    "This is a bit of a funny one, as we define an optimizer in this part. In actuality, though, this is only because we want to use Keras to do loss evaluation, which requires doing _model.compile_. We need to pass an optimizer argument to this, but we actually never use it because we don't call _model.train_"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 7,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "model.compile(loss='binary_crossentropy', optimizer=\"adam\", metrics=['accuracy'])"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "### Getting stuff into the format we want\n",
-    "\n",
-    "Basically, we can simply set the weights of the neural net using the function _model.set_weights_. We can then evaluate the objective function for a subset of data using _model.evaluate(InputData, TrueOutput)_. Pseudocode for getting the objective function for a particular position would then look something like this:"
-   ]
-  },
-  {
-   "cell_type": "raw",
-   "metadata": {},
-   "source": [
-    "X = some_input_data         #e.g. images\n",
-    "y = some_true_outputs       #e.g. image labels\n",
-    "\n",
-    "def f(positions):\n",
-    "    model.set_weights(positions)\n",
-    "    return model.evaluate(X,y)"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "In actuality, the _get_weights_ function actually passes us a list of numpy arrays, so we have to do some manipulations, but this is pretty chill, and we don't really need to worry about it. Basically, what has happened is:"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "1) Extract the information about the shape of the data we get from the _model.get_weights_ function (stored in ls_form)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 8,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "ls_form = []\n",
-    "my_weights = model.get_weights()\n",
-    "index = 0\n",
-    "for comp in my_weights:\n",
-    "    ls_form.append([index, index + np.size(comp), comp.shape])\n",
-    "    index += np.size(comp)"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "2) Define a function for converting the format we get from keras into one long numpy array"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 9,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def Convert(pre_w):\n",
-    "    position = []\n",
-    "    for w in pre_w:\n",
-    "        position.append(w.flatten())\n",
-    "    return np.concatenate(position)"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "3) Define a function for converting it back again. This uses the information we stored in the list ls_form."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 10,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def ConvertBack(position):\n",
-    "    global ls_form    \n",
-    "    reinput = []\n",
-    "    for i in ls_form:\n",
-    "        reinput.append(position[i[0]:i[1]].reshape(i[2]))\n",
-    "    return reinput"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "### Validation\n",
-    "\n",
-    "Just to check that this works, let's take the weights, convert them into one long numpy array and back again."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 11,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "x_0 = model.get_weights()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 12,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "(221,)\n"
-     ]
-    }
-   ],
-   "source": [
-    "b = Convert(x_0)\n",
-    "print(b.shape)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 10,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "x_1 = ConvertBack(b)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 11,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "model.set_weights(x_1)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 12,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "True\n",
-      "True\n",
-      "True\n",
-      "True\n",
-      "True\n",
-      "True\n"
-     ]
-    }
-   ],
-   "source": [
-    "for i in range(len(ls_form)):\n",
-    "    print(np.allclose(x_0[i], x_1[i]))"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "## Model evaluation\n",
-    "\n",
-    "We evaluate the loss associated with a model as such:"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 13,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "28.67880415916443"
-      ]
-     },
-     "execution_count": 13,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "model.evaluate(X,y,verbose=0)[0]"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "Let's see how long this takes:"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 14,
-   "metadata": {
-    "scrolled": true
-   },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "36.5 ms ± 550 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n"
-     ]
-    }
-   ],
-   "source": [
-    "%timeit model.evaluate(X,y,verbose=0)[0]"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "This gives us the time it takes, on average, to calculate the loss associated with those weights for the entire dataset"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "#### Footnotes"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "* To clarify, neuron biases are included in the definition of \"weights\"\n",
-    "* When calculating the loss, we are using the loss funtion defined in _model.compile_ (in this case, binary cross-entropy)"
-   ]
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python 3",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.7.4"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 4
-}
diff --git a/Code/Images/epochs_mse_Iris_BP.pdf b/Code/Images/epochs_mse_Iris_BP.pdf
deleted file mode 100644
index bb26c88..0000000
Binary files a/Code/Images/epochs_mse_Iris_BP.pdf and /dev/null differ
diff --git a/Code/Images/epochs_mse_Iris_BP.png b/Code/Images/epochs_mse_Iris_BP.png
deleted file mode 100644
index a69f9bd..0000000
Binary files a/Code/Images/epochs_mse_Iris_BP.png and /dev/null differ
diff --git a/Code/Iris POD-NN 70%.png b/Code/Iris POD-NN 70%.png
deleted file mode 100644
index 1633f11..0000000
Binary files a/Code/Iris POD-NN 70%.png and /dev/null differ
diff --git a/Code/Iris_POD-NN_acc70.png b/Code/Iris_POD-NN_acc70.png
deleted file mode 100644
index 68f32e6..0000000
Binary files a/Code/Iris_POD-NN_acc70.png and /dev/null differ
diff --git a/Code/NN_for_Iris.ipynb b/Code/NN_for_Iris.ipynb
deleted file mode 100644
index b6bf748..0000000
--- a/Code/NN_for_Iris.ipynb
+++ /dev/null
@@ -1,531 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "markdown",
-   "metadata": {
-    "colab_type": "text",
-    "id": "anT-jJ1cj4K5"
-   },
-   "source": [
-    "# ** Neural Network for Iris Dataset **"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {
-    "colab_type": "text",
-    "id": "w2tkSsPlkBgX"
-   },
-   "source": [
-    "NN for the Iris dataset using keras and backpropagation"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 1,
-   "metadata": {
-    "colab": {
-     "base_uri": "https://localhost:8080/",
-     "height": 408
-    },
-    "colab_type": "code",
-    "id": "gxg1ynUvkd8Z",
-    "outputId": "2b44999e-6dc3-4aa9-a24a-f3138da36914"
-   },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "2.0.0\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Using TensorFlow backend.\n"
-     ]
-    }
-   ],
-   "source": [
-    "%matplotlib inline\n",
-    "from matplotlib import pyplot as plt\n",
-    "import numpy as np\n",
-    "\n",
-    "import pandas as pd\n",
-    "\n",
-    "import tensorflow as tf\n",
-    "\n",
-    "from tensorflow import keras\n",
-    "from tensorflow.keras import layers\n",
-    "\n",
-    "import tensorflow_docs as tfdocs\n",
-    "import tensorflow_docs.plots\n",
-    "import tensorflow_docs.modeling\n",
-    "\n",
-    "print(tf.__version__)\n",
-    "\n",
-    "from IPython.display import SVG\n",
-    "from keras.utils import model_to_dot\n",
-    "import pydot\n",
-    "\n",
-    "from sklearn.datasets import load_iris\n",
-    "from sklearn.model_selection import train_test_split\n",
-    "from sklearn.preprocessing import OneHotEncoder, StandardScaler"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 2,
-   "metadata": {
-    "colab": {},
-    "colab_type": "code",
-    "id": "LyAVoO0ZkmKL"
-   },
-   "outputs": [],
-   "source": [
-    "# Weights and biases to track the hyperparameters\n",
-    "# import wandb\n",
-    "# wandb.init(project=\"nn-testing\")\n",
-    "# from wandb.keras import WandbCallback\n",
-    "# wandb.init(config={\"hyper\": \"parameter\"})"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "metadata": {
-    "colab": {
-     "base_uri": "https://localhost:8080/",
-     "height": 1000
-    },
-    "colab_type": "code",
-    "id": "QcyChPPikpu3",
-    "outputId": "0af0a79f-f6a2-475f-d580-0f43e9342cfd"
-   },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "X_train shape = (120, 4)\n",
-      "Y_train shape = (120, 3)\n",
-      "X_test shape = (30, 4)\n",
-      "Y_test shape = (30, 3)\n"
-     ]
-    }
-   ],
-   "source": [
-    "iris = load_iris()\n",
-    "X = iris['data'] # array of samples 4 dimensions each describing a feature\n",
-    "y = iris['target'] # array of labels (0, 1, 2)\n",
-    "names = iris['target_names'] # array of labels (0, 1, 2)\n",
-    "feature_names = iris['feature_names'] # ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']\n",
-    "\n",
-    "# One hot encoding\n",
-    "enc = OneHotEncoder()\n",
-    "Y = enc.fit_transform(y[:, np.newaxis]).toarray() # Y is output of 3 dimensions now, one hot encoding\n",
-    "\n",
-    "# Scale data to have mean 0 and variance 1 \n",
-    "# which is importance for convergence of the neural network\n",
-    "scaler = StandardScaler()\n",
-    "X_scaled = scaler.fit_transform(X)\n",
-    "\n",
-    "# Split the data set into training and testing\n",
-    "X_train, X_test, Y_train, Y_test = train_test_split(X_scaled, Y, test_size=0.2, random_state=2)\n",
-    "print(\"X_train shape = {}\".format(X_train.shape))\n",
-    "print(\"Y_train shape = {}\".format(Y_train.shape))\n",
-    "print(\"X_test shape = {}\".format(X_test.shape))\n",
-    "print(\"Y_test shape = {}\".format(Y_test.shape))\n",
-    "\n",
-    "n_features = X.shape[1]\n",
-    "n_classes = Y.shape[1]"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Model: \"sequential\"\n",
-      "_________________________________________________________________\n",
-      "Layer (type)                 Output Shape              Param #   \n",
-      "=================================================================\n",
-      "dense (Dense)                (None, 10)                50        \n",
-      "_________________________________________________________________\n",
-      "dense_1 (Dense)              (None, 10)                110       \n",
-      "_________________________________________________________________\n",
-      "dense_2 (Dense)              (None, 3)                 33        \n",
-      "=================================================================\n",
-      "Total params: 193\n",
-      "Trainable params: 193\n",
-      "Non-trainable params: 0\n",
-      "_________________________________________________________________\n"
-     ]
-    }
-   ],
-   "source": [
-    "def build_model():\n",
-    "    model = keras.Sequential([\n",
-    "    tf.keras.layers.Dense(10, activation=tf.nn.relu, input_shape=(4,)),  # input shape required\n",
-    "    tf.keras.layers.Dense(10, activation=tf.nn.relu),\n",
-    "    tf.keras.layers.Dense(3)\n",
-    "    ])\n",
-    "\n",
-    "    optimizer = tf.keras.optimizers.RMSprop(0.001)\n",
-    "\n",
-    "    model.compile(loss='mse',\n",
-    "                optimizer=optimizer,\n",
-    "                metrics=['mae', 'mse'])\n",
-    "    return model\n",
-    "\n",
-    "model = build_model()\n",
-    "\n",
-    "# The patience parameter is the amount of epochs to check for improvement\n",
-    "early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=15)\n",
-    "\n",
-    "model.summary()"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "## Train the full model\n",
-    "\n",
-    "#### Epochs\n",
-    "This is the number of times the network trains forwards and backwards, we will leave this as a high number as we implement early stopping.\n",
-    "\n",
-    "#### History\n",
-    "History saves the model fitting data allowing us to plot and visualise it.\n",
-    "\n",
-    "#### Validation split\n",
-    "The validation split: If you set the validation_split argument in model.fit to e.g. 0.1, then the validation data used will be the last 10% of the data. Note that the data isn't shuffled before extracting the validation split, so the validation is literally just the last x% of samples in the input you passed. Used to validate as you train."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 5,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "\n",
-      "Epoch: 0, loss:0.3499,  mae:0.4426,  mse:0.3499,  val_loss:0.3064,  val_mae:0.4203,  val_mse:0.3064,  \n",
-      ".................................................."
-     ]
-    }
-   ],
-   "source": [
-    "EPOCHS = 50\n",
-    "\n",
-    "history = model.fit(X_train, Y_train, epochs=EPOCHS, batch_size = 32, validation_split = 0.2,\n",
-    "                    verbose=0 , callbacks=[ tfdocs.modeling.EpochDots()] )"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "History is a dataframe, we can print the tail of this for the last 5 epochs to see what data we collect at each epoch."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 6,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/html": [
-       "<div>\n",
-       "<style scoped>\n",
-       "    .dataframe tbody tr th:only-of-type {\n",
-       "        vertical-align: middle;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe tbody tr th {\n",
-       "        vertical-align: top;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe thead th {\n",
-       "        text-align: right;\n",
-       "    }\n",
-       "</style>\n",
-       "<table border=\"1\" class=\"dataframe\">\n",
-       "  <thead>\n",
-       "    <tr style=\"text-align: right;\">\n",
-       "      <th></th>\n",
-       "      <th>loss</th>\n",
-       "      <th>mae</th>\n",
-       "      <th>mse</th>\n",
-       "      <th>val_loss</th>\n",
-       "      <th>val_mae</th>\n",
-       "      <th>val_mse</th>\n",
-       "      <th>epoch</th>\n",
-       "    </tr>\n",
-       "  </thead>\n",
-       "  <tbody>\n",
-       "    <tr>\n",
-       "      <th>45</th>\n",
-       "      <td>0.076230</td>\n",
-       "      <td>0.207727</td>\n",
-       "      <td>0.076230</td>\n",
-       "      <td>0.063469</td>\n",
-       "      <td>0.180819</td>\n",
-       "      <td>0.063469</td>\n",
-       "      <td>45</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>46</th>\n",
-       "      <td>0.074731</td>\n",
-       "      <td>0.205004</td>\n",
-       "      <td>0.074731</td>\n",
-       "      <td>0.061874</td>\n",
-       "      <td>0.178922</td>\n",
-       "      <td>0.061874</td>\n",
-       "      <td>46</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>47</th>\n",
-       "      <td>0.073586</td>\n",
-       "      <td>0.203607</td>\n",
-       "      <td>0.073586</td>\n",
-       "      <td>0.060481</td>\n",
-       "      <td>0.177024</td>\n",
-       "      <td>0.060481</td>\n",
-       "      <td>47</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>48</th>\n",
-       "      <td>0.072404</td>\n",
-       "      <td>0.200986</td>\n",
-       "      <td>0.072404</td>\n",
-       "      <td>0.059162</td>\n",
-       "      <td>0.175308</td>\n",
-       "      <td>0.059162</td>\n",
-       "      <td>48</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>49</th>\n",
-       "      <td>0.070952</td>\n",
-       "      <td>0.197581</td>\n",
-       "      <td>0.070952</td>\n",
-       "      <td>0.057771</td>\n",
-       "      <td>0.173549</td>\n",
-       "      <td>0.057771</td>\n",
-       "      <td>49</td>\n",
-       "    </tr>\n",
-       "  </tbody>\n",
-       "</table>\n",
-       "</div>"
-      ],
-      "text/plain": [
-       "        loss       mae       mse  val_loss   val_mae   val_mse  epoch\n",
-       "45  0.076230  0.207727  0.076230  0.063469  0.180819  0.063469     45\n",
-       "46  0.074731  0.205004  0.074731  0.061874  0.178922  0.061874     46\n",
-       "47  0.073586  0.203607  0.073586  0.060481  0.177024  0.060481     47\n",
-       "48  0.072404  0.200986  0.072404  0.059162  0.175308  0.059162     48\n",
-       "49  0.070952  0.197581  0.070952  0.057771  0.173549  0.057771     49"
-      ]
-     },
-     "execution_count": 6,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "hist = pd.DataFrame(history.history)\n",
-    "hist['epoch'] = history.epoch\n",
-    "hist.tail()"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "We can plot the mean absolute error for the training data and the validation data. When the validation data levels off our model is no longer improving."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 12,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "plotter = tfdocs.plots.HistoryPlotter(smoothing_std=2)\n",
-    "\n",
-    "plotter.plot({'Basic': history}, metric = \"mae\")\n",
-    "# plt.ylim([0, 1])\n",
-    "plt.ylabel('MAE')\n",
-    "\n",
-    "plt.figure()\n",
-    "plotter.plot({'Basic': history}, metric = \"mse\")\n",
-    "# plt.ylim([0, 1])\n",
-    "plt.ylabel('MSE')\n",
-    "plt.savefig('Images/epochs_mse_Iris_BP.pdf')"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "## Testing the model"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "We now used this learnt model to predict outputs using our test inputs.\n",
-    "\n",
-    "We note that y_test are the real output values that match the inputs X_test."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 15,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "test_predictions shape = (30, 3)\n"
-     ]
-    }
-   ],
-   "source": [
-    "test_predictions = model.predict(X_test)\n",
-    "print(\"test_predictions shape = {}\".format(test_predictions.shape))"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "### Evaluate the model's effectiveness\n",
-    "\n",
-    "Now that the model is trained, we can get some statistics on its performance.\n",
-    "\n",
-    "Evaluating means determining how effectively the model makes predictions. To determine the model's effectiveness at Iris classification, pass some sepal and petal measurements to the model and ask the model to predict what Iris species they represent. Then compare the model's predictions against the actual label. For example, a model that picked the correct species on half the input examples has an accuracy of 0.5."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 16,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "<matplotlib.legend.Legend at 0x13e4bb410>"
-      ]
-     },
-     "execution_count": 16,
-     "metadata": {},
-     "output_type": "execute_result"
-    },
-    {
-     "data": {
-      "image/png": "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\n",
-      "text/plain": [
-       "<Figure size 720x72 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "NN_output_args = np.argmax(test_predictions, axis = 1)\n",
-    "real_output_args = np.argmax(Y_test, axis = 1)\n",
-    "\n",
-    "plt.figure(figsize = (10,1))\n",
-    "plt.plot(NN_output_args,'ro', label = \"NN\")\n",
-    "plt.plot(real_output_args, 'bo', label = \"Real\")\n",
-    "plt.legend()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 17,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Test set accuracy: 93.333%\n"
-     ]
-    }
-   ],
-   "source": [
-    "test_accuracy = tf.keras.metrics.Accuracy()\n",
-    "\n",
-    "test_accuracy(NN_output_args, real_output_args)\n",
-    "print(\"Test set accuracy: {:.3%}\".format(test_accuracy.result()))"
-   ]
-  }
- ],
- "metadata": {
-  "colab": {
-   "collapsed_sections": [],
-   "name": "NN for Iris.ipynb",
-   "provenance": []
-  },
-  "kernelspec": {
-   "display_name": "Python 3",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.7.4"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 1
-}
diff --git a/Code/NN_for_MNIST.ipynb b/Code/NN_for_MNIST.ipynb
deleted file mode 100644
index d7d11ce..0000000
--- a/Code/NN_for_MNIST.ipynb
+++ /dev/null
@@ -1,737 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "markdown",
-   "metadata": {
-    "colab_type": "text",
-    "id": "anT-jJ1cj4K5"
-   },
-   "source": [
-    "# ** Neural Network for MNIST Dataset **"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {
-    "colab_type": "text",
-    "id": "w2tkSsPlkBgX"
-   },
-   "source": [
-    "NN for the Iris dataset using keras and backpropagation"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 1,
-   "metadata": {
-    "colab": {
-     "base_uri": "https://localhost:8080/",
-     "height": 408
-    },
-    "colab_type": "code",
-    "id": "gxg1ynUvkd8Z",
-    "outputId": "2b44999e-6dc3-4aa9-a24a-f3138da36914"
-   },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "2.1.0\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Using TensorFlow backend.\n"
-     ]
-    }
-   ],
-   "source": [
-    "%matplotlib inline\n",
-    "from matplotlib import pyplot as plt\n",
-    "import numpy as np\n",
-    "\n",
-    "import pandas as pd\n",
-    "\n",
-    "import tensorflow as tf\n",
-    "\n",
-    "from tensorflow import keras\n",
-    "from tensorflow.keras import layers\n",
-    "\n",
-    "import tensorflow_docs as tfdocs\n",
-    "import tensorflow_docs.plots\n",
-    "import tensorflow_docs.modeling\n",
-    "\n",
-    "print(tf.__version__)\n",
-    "\n",
-    "from IPython.display import SVG\n",
-    "from keras.utils import model_to_dot\n",
-    "import pydot\n",
-    "\n",
-    "from sklearn.datasets import load_digits\n",
-    "from sklearn.model_selection import train_test_split\n",
-    "from sklearn.preprocessing import OneHotEncoder, StandardScaler"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "metadata": {
-    "colab": {
-     "base_uri": "https://localhost:8080/",
-     "height": 1000
-    },
-    "colab_type": "code",
-    "id": "QcyChPPikpu3",
-    "outputId": "0af0a79f-f6a2-475f-d580-0f43e9342cfd"
-   },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "(1797,)\n",
-      "Big Y = (1797, 10)\n"
-     ]
-    }
-   ],
-   "source": [
-    "# The digits dataset\n",
-    "digits = load_digits()\n",
-    "X = digits['data'] # (1797, 64), 1797 digits, 64 pixels per 8x8 image\n",
-    "y = digits['target'] # 1797 labels of 0-9\n",
-    "print(y.shape)\n",
-    "images = digits['images'] # (1797, 8, 8) dataset\n",
-    "names = digits['target_names'] # [0 1 2 3 4 5 6 7 8 9]\n",
-    "\n",
-    "# One hot encoding\n",
-    "enc = OneHotEncoder()\n",
-    "Y = enc.fit_transform(y[:, np.newaxis]).toarray()\n",
-    "print(\"Big Y = {}\".format(Y.shape))\n",
-    "\n",
-    "#preprocess: scale between 0 and 1\n",
-    "X /= 16.0\n",
-    "images /= 16.0"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "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\n",
-      "text/plain": [
-       "<Figure size 432x288 with 5 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "image/png": "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\n",
-      "text/plain": [
-       "<Figure size 432x288 with 5 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# The data that we are interested in is made of 8x8 images of digits, let's\n",
-    "# have a look at the first 4 images, stored in the `images` attribute of the\n",
-    "# dataset.  If we were working from image files, we could load them using\n",
-    "# matplotlib.pyplot.imread.  Note that each image must have the same size. For these\n",
-    "# images, we know which digit they represent: it is given in the 'target' of\n",
-    "# the dataset.\n",
-    "_, axes = plt.subplots(1, 5)\n",
-    "images_and_labels = list(zip(digits.images, digits.target))\n",
-    "for ax, (image, label) in zip(axes, images_and_labels[:5]):\n",
-    "    ax.set_axis_off()\n",
-    "    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')\n",
-    "    ax.set_title('Training: %i' % label)\n",
-    "_, axes = plt.subplots(1, 5)\n",
-    "images_and_labels = list(zip(digits.images, digits.target))\n",
-    "for ax, (image, label) in zip(axes, images_and_labels[5:10]):\n",
-    "    ax.set_axis_off()\n",
-    "    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')\n",
-    "    ax.set_title('Training: %i' % label)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 9,
-   "metadata": {
-    "colab": {
-     "base_uri": "https://localhost:8080/",
-     "height": 1000
-    },
-    "colab_type": "code",
-    "id": "QcyChPPikpu3",
-    "outputId": "0af0a79f-f6a2-475f-d580-0f43e9342cfd",
-    "scrolled": true
-   },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "X_train shape = (1437, 8, 8)\n",
-      "Y_train shape = (1437,)\n",
-      "X_test shape = (360, 8, 8)\n",
-      "Y_test shape = (360,)\n",
-      "no. samples = 1797\n",
-      "no. classes = 10\n"
-     ]
-    }
-   ],
-   "source": [
-    "# Split the data set into training and testing\n",
-    "X_train, X_test, Y_train, Y_test = train_test_split(images, y, test_size=0.2, random_state=2)\n",
-    "print(\"X_train shape = {}\".format(X_train.shape))\n",
-    "print(\"Y_train shape = {}\".format(Y_train.shape))\n",
-    "print(\"X_test shape = {}\".format(X_test.shape))\n",
-    "print(\"Y_test shape = {}\".format(Y_test.shape))\n",
-    "\n",
-    "n_samples = X.shape[0]\n",
-    "print(\"no. samples = {}\".format(n_samples))\n",
-    "n_classes = Y.shape[1]\n",
-    "print(\"no. classes = {}\".format(n_classes))"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 10,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Model: \"sequential_1\"\n",
-      "_________________________________________________________________\n",
-      "Layer (type)                 Output Shape              Param #   \n",
-      "=================================================================\n",
-      "flatten_1 (Flatten)          (None, 64)                0         \n",
-      "_________________________________________________________________\n",
-      "dense_2 (Dense)              (None, 128)               8320      \n",
-      "_________________________________________________________________\n",
-      "dense_3 (Dense)              (None, 10)                1290      \n",
-      "=================================================================\n",
-      "Total params: 9,610\n",
-      "Trainable params: 9,610\n",
-      "Non-trainable params: 0\n",
-      "_________________________________________________________________\n"
-     ]
-    }
-   ],
-   "source": [
-    "def build_model():\n",
-    "    \n",
-    "    model = keras.Sequential([\n",
-    "    keras.layers.Flatten(input_shape=(8, 8)),\n",
-    "    keras.layers.Dense(128, activation='relu'),\n",
-    "    keras.layers.Dense(10)\n",
-    "])\n",
-    "\n",
-    "    model.compile(optimizer='adam',\n",
-    "              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
-    "              metrics=['accuracy', 'mae', 'mse'])\n",
-    "    return model\n",
-    "\n",
-    "model = build_model()\n",
-    "\n",
-    "# The patience parameter is the amount of epochs to check for improvement\n",
-    "early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=15)\n",
-    "\n",
-    "model.summary()"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "## Train the full model\n",
-    "\n",
-    "#### Epochs\n",
-    "This is the number of times the network trains forwards and backwards, we will leave this as a high number as we implement early stopping.\n",
-    "\n",
-    "#### History\n",
-    "History saves the model fitting data allowing us to plot and visualise it.\n",
-    "\n",
-    "#### Validation split\n",
-    "The validation split: If you set the validation_split argument in model.fit to e.g. 0.1, then the validation data used will be the last 10% of the data. Note that the data isn't shuffled before extracting the validation split, so the validation is literally just the last x% of samples in the input you passed. Used to validate as you train."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 11,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "\n",
-      "Epoch: 0, accuracy:0.2472,  loss:2.2752,  mae:4.4770,  mse:28.2074,  val_accuracy:0.5521,  val_loss:2.2457,  val_mae:4.6996,  val_mse:30.8153,  \n",
-      ".................................................."
-     ]
-    }
-   ],
-   "source": [
-    "EPOCHS = 50\n",
-    "\n",
-    "history = model.fit(X_train, Y_train, epochs=EPOCHS, batch_size = 32, validation_split = 0.2,\n",
-    "                    verbose=0 , callbacks=[ tfdocs.modeling.EpochDots()] )"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "History is a dataframe, we can print the tail of this for the last 5 epochs to see what data we collect at each epoch."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 12,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/html": [
-       "<div>\n",
-       "<style scoped>\n",
-       "    .dataframe tbody tr th:only-of-type {\n",
-       "        vertical-align: middle;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe tbody tr th {\n",
-       "        vertical-align: top;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe thead th {\n",
-       "        text-align: right;\n",
-       "    }\n",
-       "</style>\n",
-       "<table border=\"1\" class=\"dataframe\">\n",
-       "  <thead>\n",
-       "    <tr style=\"text-align: right;\">\n",
-       "      <th></th>\n",
-       "      <th>loss</th>\n",
-       "      <th>accuracy</th>\n",
-       "      <th>mae</th>\n",
-       "      <th>mse</th>\n",
-       "      <th>val_loss</th>\n",
-       "      <th>val_accuracy</th>\n",
-       "      <th>val_mae</th>\n",
-       "      <th>val_mse</th>\n",
-       "      <th>epoch</th>\n",
-       "    </tr>\n",
-       "  </thead>\n",
-       "  <tbody>\n",
-       "    <tr>\n",
-       "      <th>45</th>\n",
-       "      <td>0.177604</td>\n",
-       "      <td>0.963446</td>\n",
-       "      <td>7.627972</td>\n",
-       "      <td>76.373940</td>\n",
-       "      <td>0.214572</td>\n",
-       "      <td>0.940972</td>\n",
-       "      <td>7.843082</td>\n",
-       "      <td>80.219574</td>\n",
-       "      <td>45</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>46</th>\n",
-       "      <td>0.173360</td>\n",
-       "      <td>0.964317</td>\n",
-       "      <td>7.663134</td>\n",
-       "      <td>77.081955</td>\n",
-       "      <td>0.209863</td>\n",
-       "      <td>0.940972</td>\n",
-       "      <td>7.882885</td>\n",
-       "      <td>81.148666</td>\n",
-       "      <td>46</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>47</th>\n",
-       "      <td>0.169082</td>\n",
-       "      <td>0.961706</td>\n",
-       "      <td>7.702013</td>\n",
-       "      <td>77.849396</td>\n",
-       "      <td>0.205403</td>\n",
-       "      <td>0.947917</td>\n",
-       "      <td>7.919901</td>\n",
-       "      <td>81.926544</td>\n",
-       "      <td>47</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>48</th>\n",
-       "      <td>0.165227</td>\n",
-       "      <td>0.961706</td>\n",
-       "      <td>7.739846</td>\n",
-       "      <td>78.715981</td>\n",
-       "      <td>0.202140</td>\n",
-       "      <td>0.947917</td>\n",
-       "      <td>7.959125</td>\n",
-       "      <td>82.706573</td>\n",
-       "      <td>48</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>49</th>\n",
-       "      <td>0.162151</td>\n",
-       "      <td>0.965187</td>\n",
-       "      <td>7.774918</td>\n",
-       "      <td>79.319046</td>\n",
-       "      <td>0.198872</td>\n",
-       "      <td>0.947917</td>\n",
-       "      <td>7.997946</td>\n",
-       "      <td>83.596458</td>\n",
-       "      <td>49</td>\n",
-       "    </tr>\n",
-       "  </tbody>\n",
-       "</table>\n",
-       "</div>"
-      ],
-      "text/plain": [
-       "        loss  accuracy       mae        mse  val_loss  val_accuracy   val_mae  \\\n",
-       "45  0.177604  0.963446  7.627972  76.373940  0.214572      0.940972  7.843082   \n",
-       "46  0.173360  0.964317  7.663134  77.081955  0.209863      0.940972  7.882885   \n",
-       "47  0.169082  0.961706  7.702013  77.849396  0.205403      0.947917  7.919901   \n",
-       "48  0.165227  0.961706  7.739846  78.715981  0.202140      0.947917  7.959125   \n",
-       "49  0.162151  0.965187  7.774918  79.319046  0.198872      0.947917  7.997946   \n",
-       "\n",
-       "      val_mse  epoch  \n",
-       "45  80.219574     45  \n",
-       "46  81.148666     46  \n",
-       "47  81.926544     47  \n",
-       "48  82.706573     48  \n",
-       "49  83.596458     49  "
-      ]
-     },
-     "execution_count": 12,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "hist = pd.DataFrame(history.history)\n",
-    "hist['epoch'] = history.epoch\n",
-    "hist.tail()"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "We can plot the mean absolute error for the training data and the validation data. When the validation data levels off our model is no longer improving."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 13,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "Text(0, 0.5, 'MSE')"
-      ]
-     },
-     "execution_count": 13,
-     "metadata": {},
-     "output_type": "execute_result"
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "plotter = tfdocs.plots.HistoryPlotter(smoothing_std=2)\n",
-    "\n",
-    "plotter.plot({'Basic': history}, metric = \"accuracy\")\n",
-    "# plt.ylim([0, 1])\n",
-    "plt.ylabel('accuracy')\n",
-    "\n",
-    "plt.figure()\n",
-    "plotter.plot({'Basic': history}, metric = \"mse\")\n",
-    "# plt.ylim([0, 1])\n",
-    "plt.ylabel('MSE')"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "## Testing the model"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "We now used this learnt model to predict outputs using our test inputs.\n",
-    "\n",
-    "We note that y_test are the real output values that match the inputs X_test."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 14,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "360/360 - 0s - loss: 0.2982 - accuracy: 0.9306 - mae: 7.7694 - mse: 79.0803\n",
-      "\n",
-      "Test accuracy: 0.9305556\n",
-      "\n",
-      "Test loss: 0.29823736995458605\n"
-     ]
-    }
-   ],
-   "source": [
-    "test_loss, test_acc, test_mae, test_mse = model.evaluate(X_test, Y_test, verbose=2)\n",
-    "\n",
-    "print('\\nTest accuracy:', test_acc)\n",
-    "print('\\nTest loss:', test_loss)"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "### Make predictions\n",
-    "\n",
-    "With the model trained, you can use it to make predictions about some images. The model's linear outputs, logits. Attach a softmax layer to convert the logits to probabilities, which are easier to interpret."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 15,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "probability_model = keras.Sequential([model, keras.layers.Softmax()])\n",
-    "predictions = probability_model.predict(X_test)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 16,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def plot_image(i, predictions_array, true_label, img):\n",
-    "    predictions_array, true_label, img = predictions_array, true_label[i], img[i]\n",
-    "    plt.grid(False)\n",
-    "    plt.xticks([])\n",
-    "    plt.yticks([])\n",
-    "\n",
-    "    plt.imshow(img, cmap=plt.cm.binary)\n",
-    "\n",
-    "    predicted_label = np.argmax(predictions_array)\n",
-    "    if predicted_label == true_label:\n",
-    "        color = 'blue'\n",
-    "    else:\n",
-    "        color = 'red'\n",
-    "\n",
-    "    plt.xlabel(\"{} {:2.0f}% ({})\".format(names[predicted_label],\n",
-    "                                100*np.max(predictions_array),\n",
-    "                                names[true_label]),\n",
-    "                                color=color)\n",
-    "\n",
-    "def plot_value_array(i, predictions_array, true_label):\n",
-    "    predictions_array, true_label = predictions_array, true_label[i]\n",
-    "    plt.grid(False)\n",
-    "    plt.xticks(range(10))\n",
-    "    plt.yticks([])\n",
-    "    thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n",
-    "    plt.ylim([0, 1])\n",
-    "    predicted_label = np.argmax(predictions_array)\n",
-    "\n",
-    "    thisplot[predicted_label].set_color('red')\n",
-    "    thisplot[true_label].set_color('blue')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 17,
-   "metadata": {
-    "scrolled": false
-   },
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 864x720 with 30 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "num_rows = 5\n",
-    "num_cols = 3\n",
-    "num_images = num_rows*num_cols\n",
-    "plt.figure(figsize=(2*2*num_cols, 2*num_rows))\n",
-    "for i in range(num_images):\n",
-    "    plt.subplot(num_rows, 2*num_cols, 2*i+1)\n",
-    "    plot_image(i, predictions[i], Y_test, X_test)\n",
-    "    plt.subplot(num_rows, 2*num_cols, 2*i+2)\n",
-    "    plot_value_array(i, predictions[i], Y_test)\n",
-    "plt.tight_layout()\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 8,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "ls_form = []\n",
-    "my_weights = model.get_weights()\n",
-    "index = 0\n",
-    "for comp in my_weights:\n",
-    "    ls_form.append([index, index + np.size(comp), comp.shape])\n",
-    "    index += np.size(comp)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 9,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def Convert(pre_w):\n",
-    "    position = []\n",
-    "    for w in pre_w:\n",
-    "        position.append(w.flatten())\n",
-    "    return np.concatenate(position)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 10,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def f(positions):\n",
-    "    if positions.ndim == 1:\n",
-    "        positions = positions.reshape([1, positions.shape[0]])\n",
-    "    global model, X_train, Y_train\n",
-    "    objective = np.zeros([positions.shape[0], 1])\n",
-    "    for part_ind, part_pos in enumerate(positions):\n",
-    "        x_1 = ConvertBack(part_pos)\n",
-    "        model.set_weights(x_1)\n",
-    "        objective[part_ind] = model.evaluate(X_train, Y_train, verbose=0)\n",
-    "    return objective"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 11,
-   "metadata": {},
-   "outputs": [
-    {
-     "ename": "NameError",
-     "evalue": "name 'ConvertBack' is not defined",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
-      "\u001b[1;32m<ipython-input-11-d8a711608e3e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     14\u001b[0m \u001b[0mcurrent_pos\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mx_min\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mx_max\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mx_min\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrand\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mn_particles\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mn_dims\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;31m#initialise the particles\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     15\u001b[0m \u001b[0mp_best\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcurrent_pos\u001b[0m                                                    \u001b[1;31m#set the particle best\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 16\u001b[1;33m \u001b[0mg_best\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mp_best\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0margmin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcurrent_pos\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m;\u001b[0m                           \u001b[1;31m#get the best location\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     17\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     18\u001b[0m \u001b[0mv\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mv_min\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mv_max\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mv_min\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrand\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mn_particles\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mn_dims\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32m<ipython-input-10-caa9ef9b6ae3>\u001b[0m in \u001b[0;36mf\u001b[1;34m(positions)\u001b[0m\n\u001b[0;32m      5\u001b[0m     \u001b[0mobjective\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mpositions\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mpart_ind\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpart_pos\u001b[0m \u001b[1;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpositions\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 7\u001b[1;33m         \u001b[0mx_1\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mConvertBack\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpart_pos\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      8\u001b[0m         \u001b[0mmodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mset_weights\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      9\u001b[0m         \u001b[0mobjective\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mpart_ind\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mY_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;31mNameError\u001b[0m: name 'ConvertBack' is not defined"
-     ]
-    }
-   ],
-   "source": [
-    "#define swarm\n",
-    "n_particles = 20\n",
-    "n_dims = Convert(model.get_weights()).shape[0]\n",
-    "\n",
-    "#define parameters\n",
-    "x_min = -0.5\n",
-    "x_max = 0.5\n",
-    "v_min = 0\n",
-    "v_max = 0.01\n",
-    "c_1 = 2\n",
-    "c_2 = 2\n",
-    "\n",
-    "# Set the initial conditions\n",
-    "current_pos = x_min + (x_max-x_min)*np.random.rand(n_particles, n_dims) #initialise the particles\n",
-    "p_best = current_pos                                                    #set the particle best\n",
-    "g_best = p_best[np.argmin(f(current_pos)),:];                           #get the best location\n",
-    "\n",
-    "v = v_min + (v_max-v_min)*np.random.rand(n_particles, n_dims)\n",
-    "\n",
-    "is_better = np.zeros([n_particles,1])"
-   ]
-  }
- ],
- "metadata": {
-  "colab": {
-   "collapsed_sections": [],
-   "name": "NN for Iris.ipynb",
-   "provenance": []
-  },
-  "kernelspec": {
-   "display_name": "Python 3",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.7.4"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 1
-}
diff --git a/Code/PSO-NN.ipynb b/Code/PSO-NN.ipynb
deleted file mode 100644
index a06798b..0000000
--- a/Code/PSO-NN.ipynb
+++ /dev/null
@@ -1,714 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "# Contents\n",
-    "\n",
-    "* [Neural network structure](#nn_structure)\n",
-    "* [OOP version](#oop)\n",
-    "* [PSO algorithm](#pso)"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "## Defining our neural network structure <a id=\"nn_structure\"></a>\n",
-    "\n",
-    "Lifted from the tasty notebook of Krimbles McBarkerface.\n",
-    "This is not a cute name McPenface.\n",
-    "\n",
-    "If tensorflow_docs is not installed, gotta use this bad boy:"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 1,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Collecting git+https://www.github.com/tensorflow/docs\n",
-      "  Cloning https://www.github.com/tensorflow/docs to /private/var/folders/ks/hdpw16v52rl1q7_srpmkrxhr0000gn/T/pip-req-build-z9rkkc1f\n",
-      "  Running command git clone -q https://www.github.com/tensorflow/docs /private/var/folders/ks/hdpw16v52rl1q7_srpmkrxhr0000gn/T/pip-req-build-z9rkkc1f\n",
-      "Requirement already satisfied (use --upgrade to upgrade): tensorflow-docs==0.0.0 from git+https://www.github.com/tensorflow/docs in /usr/local/lib/python3.7/site-packages\n",
-      "Requirement already satisfied: astor in /usr/local/lib/python3.7/site-packages (from tensorflow-docs==0.0.0) (0.8.0)\n",
-      "Requirement already satisfied: absl-py in /usr/local/lib/python3.7/site-packages (from tensorflow-docs==0.0.0) (0.8.0)\n",
-      "Requirement already satisfied: six in /usr/local/lib/python3.7/site-packages (from tensorflow-docs==0.0.0) (1.12.0)\n",
-      "Requirement already satisfied: pathlib2 in /usr/local/lib/python3.7/site-packages (from tensorflow-docs==0.0.0) (2.3.5)\n",
-      "Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/site-packages (from tensorflow-docs==0.0.0) (5.3)\n",
-      "Building wheels for collected packages: tensorflow-docs\n",
-      "  Building wheel for tensorflow-docs (setup.py) ... \u001b[?25ldone\n",
-      "\u001b[?25h  Stored in directory: /private/var/folders/ks/hdpw16v52rl1q7_srpmkrxhr0000gn/T/pip-ephem-wheel-cache-tx64dsnu/wheels/13/ba/f3/3ceef648e417f4e716cdb364a92ae9db0cad6fecbcafdba405\n",
-      "Successfully built tensorflow-docs\n",
-      "/bin/sh: !pip3: command not found\n",
-      "/bin/sh: !pip3: command not found\n"
-     ]
-    }
-   ],
-   "source": [
-    "!pip3 install git+https://www.github.com/tensorflow/docs; !pip3 install pydot; !pip3 install keras"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 2,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "2.0.0\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Using TensorFlow backend.\n"
-     ]
-    }
-   ],
-   "source": [
-    "%matplotlib inline\n",
-    "from matplotlib import pyplot as plt\n",
-    "import numpy as np\n",
-    "\n",
-    "import pandas as pd\n",
-    "\n",
-    "import tensorflow as tf\n",
-    "\n",
-    "from tensorflow import keras\n",
-    "from tensorflow.keras import layers\n",
-    "\n",
-    "import tensorflow_docs as tfdocs\n",
-    "import tensorflow_docs.plots\n",
-    "import tensorflow_docs.modeling\n",
-    "\n",
-    "print(tf.__version__)\n",
-    "\n",
-    "from IPython.display import SVG\n",
-    "from keras.utils import model_to_dot\n",
-    "import pydot\n",
-    "\n",
-    "from sklearn.datasets import load_iris\n",
-    "from sklearn.model_selection import train_test_split\n",
-    "from sklearn.preprocessing import OneHotEncoder, StandardScaler"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "X_train shape = (120, 4)\n",
-      "Y_train shape = (120, 3)\n",
-      "X_test shape = (30, 4)\n",
-      "Y_test shape = (30, 3)\n"
-     ]
-    }
-   ],
-   "source": [
-    "iris = load_iris()\n",
-    "X = iris['data'] # array of samples 4 dimensions each describing a feature\n",
-    "y = iris['target'] # array of labels (0, 1, 2)\n",
-    "names = iris['target_names'] # array of labels (0, 1, 2)\n",
-    "feature_names = iris['feature_names'] # ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']\n",
-    "\n",
-    "# One hot encoding\n",
-    "enc = OneHotEncoder()\n",
-    "Y = enc.fit_transform(y[:, np.newaxis]).toarray() # Y is output of 3 dimensions now, one hot encoding\n",
-    "\n",
-    "# Scale data to have mean 0 and variance 1 \n",
-    "# which is importance for convergence of the neural network\n",
-    "scaler = StandardScaler()\n",
-    "X_scaled = scaler.fit_transform(X)\n",
-    "\n",
-    "# Split the data set into training and testing\n",
-    "X_train, X_test, Y_train, Y_test = train_test_split(X_scaled, Y, test_size=0.2, random_state=2)\n",
-    "print(\"X_train shape = {}\".format(X_train.shape))\n",
-    "print(\"Y_train shape = {}\".format(Y_train.shape))\n",
-    "print(\"X_test shape = {}\".format(X_test.shape))\n",
-    "print(\"Y_test shape = {}\".format(Y_test.shape))\n",
-    "\n",
-    "n_features = X.shape[1]\n",
-    "n_classes = Y.shape[1]"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Model: \"sequential\"\n",
-      "_________________________________________________________________\n",
-      "Layer (type)                 Output Shape              Param #   \n",
-      "=================================================================\n",
-      "dense (Dense)                (None, 10)                50        \n",
-      "_________________________________________________________________\n",
-      "dense_1 (Dense)              (None, 10)                110       \n",
-      "_________________________________________________________________\n",
-      "dense_2 (Dense)              (None, 3)                 33        \n",
-      "=================================================================\n",
-      "Total params: 193\n",
-      "Trainable params: 193\n",
-      "Non-trainable params: 0\n",
-      "_________________________________________________________________\n"
-     ]
-    }
-   ],
-   "source": [
-    "def build_model():\n",
-    "    model = keras.Sequential([\n",
-    "    tf.keras.layers.Dense(10, activation=tf.nn.relu, input_shape=(4,)),  # input shape required\n",
-    "    tf.keras.layers.Dense(10, activation=tf.nn.relu),\n",
-    "    tf.keras.layers.Dense(3)\n",
-    "    ])\n",
-    "\n",
-    "    optimizer = tf.keras.optimizers.RMSprop(0.001)\n",
-    "\n",
-    "    model.compile(loss='mse',\n",
-    "                optimizer=optimizer)\n",
-    "    return model\n",
-    "\n",
-    "model = build_model()\n",
-    "\n",
-    "# The patience parameter is the amount of epochs to check for improvement\n",
-    "early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=15)\n",
-    "\n",
-    "model.summary()"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "## Use the method for extracting and converting weights to positions"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 5,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "ls_form = []\n",
-    "my_weights = model.get_weights()\n",
-    "index = 0\n",
-    "for comp in my_weights:\n",
-    "    ls_form.append([index, index + np.size(comp), comp.shape])\n",
-    "    index += np.size(comp)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 6,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def Convert(pre_w):\n",
-    "    position = []\n",
-    "    for w in pre_w:\n",
-    "        position.append(w.flatten())\n",
-    "    return np.concatenate(position)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 7,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def ConvertBack(position):\n",
-    "    global ls_form    \n",
-    "    reinput = []\n",
-    "    for i in ls_form:\n",
-    "        reinput.append(position[i[0]:i[1]].reshape(i[2]))\n",
-    "    return reinput"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 8,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "0.491852996746699"
-      ]
-     },
-     "execution_count": 8,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "model.evaluate(X_train, Y_train, verbose=0)"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "# PSO algorithm <a id=\"pso\"></a>"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "### Define the objective function"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 9,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def f(positions, X_in = X_train, Y_in = Y_train):\n",
-    "    if positions.ndim == 1:\n",
-    "        positions = positions.reshape([1, positions.shape[0]])\n",
-    "    global model, X_train, Y_train\n",
-    "    objective = np.zeros([positions.shape[0], 1])\n",
-    "    for part_ind, part_pos in enumerate(positions):\n",
-    "        x_1 = ConvertBack(part_pos)\n",
-    "        model.set_weights(x_1)\n",
-    "        objective[part_ind] = model.evaluate(X_in, Y_in, verbose=0)\n",
-    "    return objective"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "### Define the parameters of the swarm"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 10,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "#define swarm\n",
-    "n_particles = 50\n",
-    "n_dims = Convert(model.get_weights()).shape[0]\n",
-    "\n",
-    "#define parameters\n",
-    "x_min = -1\n",
-    "x_max = 1\n",
-    "v_min = 0\n",
-    "v_max = 0.1\n",
-    "c_1 = 2\n",
-    "c_2 = 2\n",
-    "\n",
-    "# Set the initial conditions\n",
-    "current_pos = x_min + (x_max-x_min)*np.random.rand(n_particles, n_dims) #initialise the particles\n",
-    "p_best = current_pos                                                    #set the particle best\n",
-    "g_best = p_best[np.argmin(f(current_pos)),:];                           #get the best location\n",
-    "\n",
-    "v = v_min + (v_max-v_min)*np.random.rand(n_particles, n_dims)\n",
-    "\n",
-    "is_better = np.zeros([n_particles,1])\n",
-    "\n",
-    "pbest_perform = f(p_best)\n",
-    "gbest_perform = f(g_best)"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "## Define the animation function (swarm optimization)"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "We REALLY need to alter this function to only evaluate the function once. This will speed up the algorithm by a factor of 4"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 11,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def train(iterations = 20):\n",
-    "    global n_particles, n_dims, v, v_max, c_1, c_2, current_pos, p_best, pbest_perform, g_best, gbest_perform, is_better\n",
-    "    training_curve = [];\n",
-    "        \n",
-    "    for i in range(iterations):\n",
-    "        m_v_max = v_max#*g_best_perform\n",
-    "\n",
-    "        #update the positions using the velocity\n",
-    "        v += c_1*(np.random.rand(current_pos.shape[0],1))*(p_best-current_pos)\n",
-    "        v += c_2*(np.random.rand(current_pos.shape[0],1))*(g_best-current_pos)\n",
-    "        v_norm = np.linalg.norm(v,axis=1).reshape([v.shape[0],1])             #code for velocity limitation\n",
-    "        v = np.where(v_norm < m_v_max, v, m_v_max*v/v_norm)                       #(comment in to use it)\n",
-    "        current_pos += v\n",
-    "        curr_perform = f(current_pos)\n",
-    "        #replace the p_bests with the current location if they're better\n",
-    "        is_better = (curr_perform<pbest_perform).reshape([is_better.shape[0],1])\n",
-    "        p_best = is_better*current_pos + np.logical_not(is_better)*p_best\n",
-    "        pbest_perform = is_better*curr_perform + np.logical_not(is_better)*pbest_perform\n",
-    "        #update g_best\n",
-    "        if np.min(pbest_perform) < gbest_perform:\n",
-    "            g_best = p_best[np.argmin(pbest_perform),:]\n",
-    "            gbest_perform = np.min(pbest_perform)\n",
-    "        print(\"\\rIteration \" + str(i+1) + \": \" + str(gbest_perform), end = \"\\r\")\n",
-    "        training_curve.append([gbest_perform.astype(float), f(g_best, X_in = X_test, Y_in = Y_test)[0][0].astype(float)])\n",
-    "    return np.array(training_curve)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 12,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def train_with_batch(batch_size=30):\n",
-    "    global n_particles, n_dims, v, v_max, c_1, c_2, current_pos, p_best, pbest_perform, g_best, gbest_perform, is_better\n",
-    "    global X_train\n",
-    "    for i in range(20):\n",
-    "    #     m_v_max = v_max_initial*np.exp(i/20)\n",
-    "        for ind in range((X_train.shape[0]//batch_size)+1):\n",
-    "            X_batch = X_train[ind*batch_size:(ind+1)*batch_size]\n",
-    "            Y_batch = Y_train[ind*batch_size:(ind+1)*batch_size]\n",
-    "            #update the positions using the velocity\n",
-    "            v += c_1*(np.random.rand(current_pos.shape[0],1))*(p_best-current_pos)\n",
-    "            v += c_2*(np.random.rand(current_pos.shape[0],1))*(g_best-current_pos)\n",
-    "            v_norm = np.linalg.norm(v,axis=1).reshape([v.shape[0],1])             #code for velocity limitation\n",
-    "            v = np.where(v_norm < v_max, v, v_max*v/v_norm)                       #(comment in to use it)\n",
-    "            current_pos += v\n",
-    "            curr_perform = f(current_pos, X_in = X_batch, Y_in = Y_batch)\n",
-    "            #replace the p_bests with the current location if they're better\n",
-    "            is_better = (curr_perform<pbest_perform).reshape([is_better.shape[0],1])\n",
-    "            p_best = is_better*current_pos + np.logical_not(is_better)*p_best\n",
-    "            pbest_perform = is_better*curr_perform + np.logical_not(is_better)*pbest_perform\n",
-    "            #update g_best\n",
-    "            if np.min(pbest_perform) < gbest_perform:\n",
-    "                g_best = p_best[np.argmin(pbest_perform),:]\n",
-    "                gbest_perform = np.min(pbest_perform)\n",
-    "            print(\"\\rIteration \" + str(i+1) + \".\" + str(ind) + \": \" + str(gbest_perform), end = \"\\r\")"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 13,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Iteration 100: 0.1401733194788297\r"
-     ]
-    }
-   ],
-   "source": [
-    "m_train_data = train(iterations=100)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 27,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "plt.plot(m_train_data[:,0], label=\"Training\")\n",
-    "plt.plot(m_train_data[:,1], label=\"Validation\")\n",
-    "plt.legend()\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 15,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "0.1401733194788297"
-      ]
-     },
-     "execution_count": 15,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "f(g_best)[0][0]"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 16,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "KrimbleWeights = np.load(\"SaveThoseWeights.npy\")"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 17,
-   "metadata": {
-    "scrolled": true
-   },
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "0.11082142641146978"
-      ]
-     },
-     "execution_count": 17,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "f(KrimbleWeights)[0][0]"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 18,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "<matplotlib.legend.Legend at 0x1bb31a910>"
-      ]
-     },
-     "execution_count": 18,
-     "metadata": {},
-     "output_type": "execute_result"
-    },
-    {
-     "data": {
-      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkkAAABXCAYAAAAQw9H2AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAPh0lEQVR4nO3dfWxcVXrH8e/jl8RMDArZRAvEeMx2KwiCkheLshKqUCuq7YrwIq2iLpRsFSpXAQSISN3SSNStsFQhWJpIUZqUIFHZW1gtKewfK5EFhRIkusROnd0lThsW2bEDTRxHgTiBhMRP/7iDsePrl/Gc8ZwZfh/pambOnTnznHPPxE/mnrnH3B0RERERGa+q1AGIiIiIxEhJkoiIiEgKJUkiIiIiKZQkiYiIiKRQkiQiIiKSQkmSiIiISIppkyQzu9rMdpvZATN738wenYvARERERErJprtOkpldCVzp7vvM7FKgC7jb3Q9M9prFixd7U1NT0EBjdOLwMEcG53GOeczjHEuXnGNRY32pw5q1mNoTKpaY2iSTOHECjhyBc+dg3jxYuhQWLZr7OkIJFEtUYzei/g3SLxG1JyYxjbm5jqWrq+u4uy+ZsMPd89qA14Dbp3rOqlWrvNK1r9/jGYYdfHTLMOzt6/eUOrRZiak9oWKJqU0yifZ290zGxx+kTFI+l3WEEiiWqMZuRP0bpF8iak9MYhpzpYgF6PSUfGbab5LGMrMm4G3gBnf/dLLnNTc3e2dnZ35pXJlpqhmg70LDhPJs9QC95yeWxy6m9oSKJaY2ySSamqCvb2J5Ngu9vXNXRyiBYolq7EbUv0H6JaL2xCSmMVeKWMysy92bJ5TPNEkys3rgP4E2d9+Zsr8FaAFobGxc1Zc2CCtIlY3gKVO6jBFGvPzmw8fUnlCxxNQmmURVVfIfxYuZwcjI3NURSqBYohq7EfVvkH6JqD0xiWnMlSKWyZKkGb2bmdUCrwAdaQkSgLtvd/dmd29esmTiab1K01j9UV7lsYupPaFiialNMonGxvzKi1VHKIFiiWrsRtS/QfolovbEJKYxF1MsNdM9wcwM2AH0uPuPix9SeWhr6aVl6+WcYcFoWYbTtLX0AuV3Kiem9oSKJaY2ySTa2qClBc6c+aosk0nK57KOUALFEtXYjah/g/RLRO2JSVtLL3/z0qX8qPUE3/7251RVJd/cfKP+HD09p+Y0lp+99TlDw5+M+zYpVCx1dXU0NDRQW1s7sxekTVQauwG3Ag78GujObd+b6jVfh4nb7snksmx1vxsXPFvdX/YTgmNqT6hYYmqTTKK93T2bdTdLbmczgTZEHaEEiiWqsRtR/wbpl4jaE5M9r3V653997Hv3XvD9e8/68d5PSxbL8d5Pff/es75370iwWEZGRnxwcNA//PDDCfsIMXF7pr4OE7dFREQqSU9PD9dddx3JCaTK5O4cPHiQZcuWjSsvaE6SiIiIVL5KTpAg//YpSRIRERFJoSRJREREomBmbNiwYfTxM888Q2trKwCtra1kMhmOHTs2ur++vrhXBFeSJCIiIvnr6EguzllVldx2dBRc5fz589m5cyfHjx9P3b948WKeffbZgt9nppQkiYiISH46OpJLKfT1JRfn7OtLHheYKNXU1NDS0sJzzz2Xun/dunW8/PLLnDhxoqD3mSklSSIiIpKfjRvHX2sKkscbNxZc9UMPPURHRweffPLJhH319fWsW7eOTZs2Ffw+M6EkSURERPJz+HB+5Xm47LLLWLt2LZs3b07d/8gjj/Diiy9y6lTxL3KpJElERETyU+TlXR577DF27NjB6dOnJ+xbuHAh9957L1u2bAnyXlNRkiQiIiL5aWtLlnMZK+DyLosWLWLNmjXs2LEjdf/jjz/Otm3bOH/+fJD3m4ySJBEREcnPfffB9u2QzYJZcrt9e1IeyIYNG6b8lds999zD2bNng71fGi1LIiIiIvT09ExYrqMSpbVTy5KIiIiI5EFJkoiIiEgKJUkiIiIiKZQkiYiIiKRQkiQiIiKSQkmSiIiISAolSSJSUiEWEi/CYuSzFlUsD75DU80AVTZCU80AHQ++M7t6dIyKWo98pbq6muXLl3PDDTewevVqTp48Oeu6mpqaJr3O0oy5e/Bt1apVLiIynfZ290zGPVlGPNkymaR8LusIJapY1u/xDMPjY2HY29fvya8eHaOi1hOTAwcO5PX89nb3bNbdLLkN0fYFCxaM3l+7dq0/9dRTs64rm8364ODghPK0dgKdnpLPKEkSkZLJZsf/kflyy2bnto5Qooqluj89lur+/OrJ6hgVs56Y5JMkFStJHJskbd261devXz/6+Omnn/bm5ma/8cYb/cknnxwtv+uuu3zlypV+/fXX+7Zt20bLQyRJOt0mIiUTYiHxIi5GnreoYrlwVV7lk9ajY1TUesrVxo1w5sz4sjNnkvIQLly4wJtvvsmdd94JwK5duzh06BDvvfce3d3ddHV18fbbbwPwwgsv0NXVRWdnJ5s3b2ZoaChMEGhOkoiUUIiFxIu8GHleooql+qO8yietR8eoqPWUq2IliZ999hnLly/niiuu4OjRo9x+++1AkiTt2rWLFStWsHLlSg4ePMihQ4cA2Lx5MzfddBO33HIL/f39o+UhKEkSkZIJsZB4kRcjz0tUsbT0kuH0+Fg4TVtLb3716BgVtZ5yVawk8ZJLLqG7u5u+vj7cnS1btgDJ1KAnnniC7u5uuru7+eCDD3jggQd46623eOONN3j33XfZv38/K1as4PPPPy8siLHSzsEVumlOkojMVIjJn8WYQDpbUcWyfo9nq/vduODZ6v68J22P1qNjVNR6YhHbnKR9+/Z5Y2Ojf/HFF/7666/7zTff7KdOnXJ394GBAT969Ki/+uqrfscdd7i7e09Pj8+fP993797t7mHmJFmyL6zm5mbv7OwMXq+IiIgUR09PD8uWLZvx8zs6kjlIhw8n3yC1tcF99xUWQ319PcPDw6OPV69ezZo1a7j//vvZtGkTzz///Ojz2tvbaWho4O6776a3t5drr72WkydP0traym233UZTUxOdnZ0sXrx42naaWZe7N18cj5IkERERyTtJKlf5JEmakyQiIiKSQkmSiIiISAolSSIiIgIkP+aqZPm2T0mSiIiIUFdXx9DQUMUmSu7O0NAQdXV1M35NTRHjERERkTLR0NDAwMAAg4ODpQ6laOrq6mhoaJjx85UkiYiICLW1tVxzzTWlDiMqOt0mIiIikkJJkoiIiEgKJUkiIiIiKZQkiYiIiKRQkiQiIiKSQkmSiIiISAolSSIiIiIplCSJiIiIpFCSJCIiIpJiRkmSmX3XzP7HzD4ws78tdlBT6XjwHZpqBqiyEZpqBuh48J2S1BFKqFgqsU2xiOkYVWIsManENkWjowOamqCqKrnt6Ch1RIUL0KaYPtOhxBRLwdx9yg2oBn4HfAuYB+wHrp/qNatWrfJiaF+/xzMMO/jolmHY29fvmdM6QgkVSyW2KRYxHaNKjCUmldimaLS3u2cyPr5zM0l5uQrQppg+06HEFEs+gE5Py4HSCsc9Ab4DvD7m8RPAE1O9plhJUra6f1zHf7llq/vntI5QQsVSiW2KRUzHqBJjiUkltika2ezEjoWkvFwFaFNMn+lQYoolH5MlSZbsm5yZfR/4rrv/Ve7x/cAfuvvDFz2vBWgBaGxsXNXX1xfou66vVNkInnKG0BhhxGc2vSpEHaGEiqUS2xSLmI5RJcYSk0psUzSqqpK/lRczg5GRuY8nhABtiukzHUpMseTDzLrcvfni8mARu/t2d2929+YlS5aEqnacxuqP8iovVh2hhIqlEtsUi5iOUSXGEpNKbFM0GhvzKy8HAdoU02c6lJhiCWEmSdIR4OoxjxtyZXOuraWXDKfHlWU4TVtL75zWEUqoWCqxTbGI6RhVYiwxqcQ2RaOtDTKZ8WWZTFJergK0KabPdCgxxRLCTE631QD/C/wJSXK0F7jX3d+f4jWDQPjzbUA932g8y1VLvmAetZxjPh8NDjN0eK7rCCVULIHbtBg4PsvXRtW/IcR0jCoxlsA0dotr1v27GBZdBUtrYd4XcO4jOHIcTgSOb06FaFNMn+lQYopljOnGbtbdJ5wGq5muVnc/b2YPA6+T/NLthakSpNxrinO+bQwz6zyXcv5QCmdmnWnnZiUMjd3i0dgtLvVv8ejfheKa7didNkkCcPdfAL/IOyoRERGRMhXvVHMRERGREirnJGl7qQOoYOrb4lL/Fo/6trjUv8Wjvi2uWfXvtBO3RURERL6OyvmbJBEREZGiKbskKabFdiuRmfWa2W/MrNvMOksdT7kzsxfM7JiZ/XZM2SIz+6WZHcrdXl7KGMvVJH3bamZHcuO328y+V8oYy5WZXW1mu83sgJm9b2aP5so1dgOYon81fgtkZnVm9p6Z7c/17T/kyq8xs1/lcoeXzWzejOorp9NtZlZNcs2m24EBkms2/cDdD5Q0sApiZr1As7vP+loz8hUz+yNgGPg3d78hV/Y0cMLd/ymX6F/u7j8qZZzlaJK+bQWG3f2ZUsZW7szsSuBKd99nZpcCXcDdwF+isVuwKfp3DRq/BTEzAxa4+7CZ1QLvAI8CjwM73f0lM/sXYL+7b52uvnL7Julm4AN3/9DdzwEvAXeVOCaRSbn720y8uNxdwIu5+y+S/OMoeZqkbyUAd//Y3ffl7p8CeoClaOwGMUX/SoFy69UO5x7W5jYH/hj4Wa58xmO33JKkpUD/mMcDaGCF5sAuM+vKLVos4X3T3T/O3f8/4JulDKYCPWxmv86djtPpoAKZWROwAvgVGrvBXdS/oPFbMDOrNrNu4BjwS+B3wEl3P597yoxzh3JLkqT4bnX3lcCfAQ/lTmlIkXhyvrt8znnHbyvwe8By4GPg2dKGU97MrB54BXjM3T8du09jt3Ap/avxG4C7X3D35SRrzd4MXDfbusotSYpmsd1K5e5HcrfHgP8gGWAS1tHcnIQv5yYcK3E8FcPdj+b+gRwB/hWN31nLzed4Behw9525Yo3dQNL6V+M3LHc/CewGvgMszK1FC3nkDuWWJO0Ffj83S30e8OfAz0scU8UwswW5SYSY2QLgT4HfTv0qmYWfAz/M3f8h8FoJY6koX/4Bz7kHjd9ZyU1+3QH0uPuPx+zS2A1gsv7V+C2cmS0xs4W5+5eQ/NCrhyRZ+n7uaTMeu2X16zaA3E8i/5mvFtttK3FIFcPMvkXy7REk6/r9RP1bGDP7d+A2khWojwJ/D7wK/BRoBPqANe6uCch5mqRvbyM5VeFAL/DXY+bQyAyZ2a3AHuA3wEiu+O9I5s1o7BZoiv79ARq/BTGzPyCZmF1N8kXQT939H3N/314CFgH/DfyFu5+dtr5yS5JERERE5kK5nW4TERERmRNKkkRERERSKEkSERERSaEkSURERCSFkiQRERGRFEqSRERERFIoSRIRERFJoSRJREREJMX/Aw2xi9M7OfgMAAAAAElFTkSuQmCC\n",
-      "text/plain": [
-       "<Figure size 720x72 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "x_1 = ConvertBack(g_best)\n",
-    "model.set_weights(x_1)\n",
-    "\n",
-    "test_predictions = model.predict(X_test)\n",
-    "NN_output_args = np.argmax(test_predictions, axis = 1)\n",
-    "real_output_args = np.argmax(Y_test, axis = 1)\n",
-    "\n",
-    "plt.figure(figsize = (10,1))\n",
-    "plt.plot(NN_output_args,'ro', label = \"NN\")\n",
-    "plt.plot(real_output_args, 'bo', label = \"Real\")\n",
-    "plt.legend()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 19,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Test set accuracy: 76.667%\n"
-     ]
-    }
-   ],
-   "source": [
-    "test_accuracy = tf.keras.metrics.Accuracy()\n",
-    "\n",
-    "test_accuracy(NN_output_args, real_output_args)\n",
-    "print(\"Test set accuracy: {:.3%}\".format(test_accuracy.result()))"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "# Extracting the weights and biases for later use"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 20,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "np.save(\"50_part_100_iters_tcurve\", m_train_data)"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "# Evaluating performance"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 21,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def evaluate(positions):\n",
-    "    if positions.ndim == 1:\n",
-    "        positions = positions.reshape([1, positions.shape[0]])\n",
-    "    global model, X_train, Y_train\n",
-    "    objective = np.zeros([positions.shape[0], 1])\n",
-    "    for part_ind, part_pos in enumerate(positions):\n",
-    "        x_1 = ConvertBack(part_pos)\n",
-    "        model.set_weights(x_1)\n",
-    "        objective[part_ind] = model.evaluate(X_test, Y_test, verbose=0)\n",
-    "    return objective"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "$$$$\n",
-    "$$$$\n",
-    "$$$$\n",
-    "$$$$\n",
-    "$$$$\n",
-    "$$$$\n",
-    "$$$$\n",
-    "$$$$"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "## Object-oriented version\n",
-    "\n",
-    "Have implemented an object-oriented version of this optimization algorithm, as the code is starting to look like spaghetti. You define a new swarm like this:"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 22,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "import SwarmParty as swarm"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 23,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "swarm = swarm.NN_Swarm()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 24,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "swarm.provide_model(model)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 25,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "(30, 193)\n"
-     ]
-    }
-   ],
-   "source": [
-    "swarm.provide_data(X_train, X_test, Y_train, Y_test)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 26,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Performance at iteration 30: 0.43677852749824525\r"
-     ]
-    }
-   ],
-   "source": [
-    "training_curve = swarm.train()"
-   ]
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python 3",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.7.4"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 2
-}
diff --git a/Code/PSO_weights.npy b/Code/PSO_weights.npy
deleted file mode 100644
index 7cd16b5..0000000
Binary files a/Code/PSO_weights.npy and /dev/null differ
diff --git a/Code/SaveThoseWeights.npy b/Code/SaveThoseWeights.npy
deleted file mode 100644
index 076992d..0000000
Binary files a/Code/SaveThoseWeights.npy and /dev/null differ
diff --git a/Code/SwarmParty.py b/Code/SwarmParty.py
index 4092381..2a4279d 100644
--- a/Code/SwarmParty.py
+++ b/Code/SwarmParty.py
@@ -2,6 +2,7 @@ import numpy as np
 import pylab as plt
 import tensorflow as tf
 from tensorflow import keras
+import wandb
 
 class NN_Swarm():
     
@@ -45,9 +46,9 @@ class NN_Swarm():
         self.gbest_perform = self.f(self.g_best)
         self.nn_weights = self._ConvertBack(self.g_best)      
 
-    def train(self, iterations = 30, give_curve = False, train_fast = False, patience = False):
+    def train(self, num_epochs = 30, give_curve = False, train_fast = False, patience = False):
         """ Function to initiate swarm optimization of the weights and biases for the keras
-        model provided. Runs for 50 iterations by default. Set give_curve = True to directly
+        model provided. Runs for 50 num_epochs by default. Set give_curve = True to directly
         return a training curve (a numpy array with performance evaluations on training and 
         test data for each iteration) """
 
@@ -68,10 +69,10 @@ class NN_Swarm():
             training_curve = []
         is_better = np.zeros([self.n_particles,1])
         
-        for i in range(iterations):
+        for epoch in range(num_epochs):
             
             ## PSO Loop
-            m_v_max = self.v_max*np.exp(i/iterations) #*g_best_perform
+            m_v_max = self.v_max*np.exp(epoch/num_epochs) #*g_best_perform
 
             #update the positions using the velocity
             self.v += self.c_1*(np.random.rand(self.current_pos.shape[0],1))*(self.p_best-self.current_pos)
@@ -81,7 +82,7 @@ class NN_Swarm():
             self.current_pos += self.v
             curr_perform = self.f(self.current_pos)
             
-            #replace the p_bests with the current location if they're better
+            #replace the p_bests with the current location if they are better
             is_better = (curr_perform<self.pbest_perform).reshape([is_better.shape[0],1])
             self.p_best = is_better*self.current_pos + np.logical_not(is_better)*self.p_best
             self.pbest_perform = is_better*curr_perform + np.logical_not(is_better)*self.pbest_perform
@@ -95,7 +96,10 @@ class NN_Swarm():
                 count_no_improv += 1
                 if count_no_improv > patience:
                     break
-            print("\rPerformance at iteration " + str(i+1) + ": " + str(self.gbest_perform), end = "\r")
+            print("\rPerformance at iteration " + str(epoch+1) + ": " + str(self.gbest_perform), end = "\r")
+
+            # log wandb parameters
+            wandb.log({'epoch': epoch, 'train_loss': self.gbest_perform.astype(float), 'val_loss':self.f(self.g_best, val_set = True)[0][0].astype(float)})
             
             if not train_fast:
                 training_curve.append([self.gbest_perform.astype(float), self.f(self.g_best, val_set = True)[0][0].astype(float)])
diff --git a/Code/__pycache__/SwarmParty.cpython-37.pyc b/Code/__pycache__/SwarmParty.cpython-37.pyc
index 0ebff1c..60027b5 100644
Binary files a/Code/__pycache__/SwarmParty.cpython-37.pyc and b/Code/__pycache__/SwarmParty.cpython-37.pyc differ
diff --git a/Code/pima_indians.csv b/Code/pima_indians.csv
deleted file mode 100644
index 9c3e9b8..0000000
--- a/Code/pima_indians.csv
+++ /dev/null
@@ -1,768 +0,0 @@
-6,148,72,35,0,33.6,0.627,50,1
-1,85,66,29,0,26.6,0.351,31,0
-8,183,64,0,0,23.3,0.672,32,1
-1,89,66,23,94,28.1,0.167,21,0
-0,137,40,35,168,43.1,2.288,33,1
-5,116,74,0,0,25.6,0.201,30,0
-3,78,50,32,88,31.0,0.248,26,1
-10,115,0,0,0,35.3,0.134,29,0
-2,197,70,45,543,30.5,0.158,53,1
-8,125,96,0,0,0.0,0.232,54,1
-4,110,92,0,0,37.6,0.191,30,0
-10,168,74,0,0,38.0,0.537,34,1
-10,139,80,0,0,27.1,1.441,57,0
-1,189,60,23,846,30.1,0.398,59,1
-5,166,72,19,175,25.8,0.587,51,1
-7,100,0,0,0,30.0,0.484,32,1
-0,118,84,47,230,45.8,0.551,31,1
-7,107,74,0,0,29.6,0.254,31,1
-1,103,30,38,83,43.3,0.183,33,0
-1,115,70,30,96,34.6,0.529,32,1
-3,126,88,41,235,39.3,0.704,27,0
-8,99,84,0,0,35.4,0.388,50,0
-7,196,90,0,0,39.8,0.451,41,1
-9,119,80,35,0,29.0,0.263,29,1
-11,143,94,33,146,36.6,0.254,51,1
-10,125,70,26,115,31.1,0.205,41,1
-7,147,76,0,0,39.4,0.257,43,1
-1,97,66,15,140,23.2,0.487,22,0
-13,145,82,19,110,22.2,0.245,57,0
-5,117,92,0,0,34.1,0.337,38,0
-5,109,75,26,0,36.0,0.546,60,0
-3,158,76,36,245,31.6,0.851,28,1
-3,88,58,11,54,24.8,0.267,22,0
-6,92,92,0,0,19.9,0.188,28,0
-10,122,78,31,0,27.6,0.512,45,0
-4,103,60,33,192,24.0,0.966,33,0
-11,138,76,0,0,33.2,0.420,35,0
-9,102,76,37,0,32.9,0.665,46,1
-2,90,68,42,0,38.2,0.503,27,1
-4,111,72,47,207,37.1,1.390,56,1
-3,180,64,25,70,34.0,0.271,26,0
-7,133,84,0,0,40.2,0.696,37,0
-7,106,92,18,0,22.7,0.235,48,0
-9,171,110,24,240,45.4,0.721,54,1
-7,159,64,0,0,27.4,0.294,40,0
-0,180,66,39,0,42.0,1.893,25,1
-1,146,56,0,0,29.7,0.564,29,0
-2,71,70,27,0,28.0,0.586,22,0
-7,103,66,32,0,39.1,0.344,31,1
-7,105,0,0,0,0.0,0.305,24,0
-1,103,80,11,82,19.4,0.491,22,0
-1,101,50,15,36,24.2,0.526,26,0
-5,88,66,21,23,24.4,0.342,30,0
-8,176,90,34,300,33.7,0.467,58,1
-7,150,66,42,342,34.7,0.718,42,0
-1,73,50,10,0,23.0,0.248,21,0
-7,187,68,39,304,37.7,0.254,41,1
-0,100,88,60,110,46.8,0.962,31,0
-0,146,82,0,0,40.5,1.781,44,0
-0,105,64,41,142,41.5,0.173,22,0
-2,84,0,0,0,0.0,0.304,21,0
-8,133,72,0,0,32.9,0.270,39,1
-5,44,62,0,0,25.0,0.587,36,0
-2,141,58,34,128,25.4,0.699,24,0
-7,114,66,0,0,32.8,0.258,42,1
-5,99,74,27,0,29.0,0.203,32,0
-0,109,88,30,0,32.5,0.855,38,1
-2,109,92,0,0,42.7,0.845,54,0
-1,95,66,13,38,19.6,0.334,25,0
-4,146,85,27,100,28.9,0.189,27,0
-2,100,66,20,90,32.9,0.867,28,1
-5,139,64,35,140,28.6,0.411,26,0
-13,126,90,0,0,43.4,0.583,42,1
-4,129,86,20,270,35.1,0.231,23,0
-1,79,75,30,0,32.0,0.396,22,0
-1,0,48,20,0,24.7,0.140,22,0
-7,62,78,0,0,32.6,0.391,41,0
-5,95,72,33,0,37.7,0.370,27,0
-0,131,0,0,0,43.2,0.270,26,1
-2,112,66,22,0,25.0,0.307,24,0
-3,113,44,13,0,22.4,0.140,22,0
-2,74,0,0,0,0.0,0.102,22,0
-7,83,78,26,71,29.3,0.767,36,0
-0,101,65,28,0,24.6,0.237,22,0
-5,137,108,0,0,48.8,0.227,37,1
-2,110,74,29,125,32.4,0.698,27,0
-13,106,72,54,0,36.6,0.178,45,0
-2,100,68,25,71,38.5,0.324,26,0
-15,136,70,32,110,37.1,0.153,43,1
-1,107,68,19,0,26.5,0.165,24,0
-1,80,55,0,0,19.1,0.258,21,0
-4,123,80,15,176,32.0,0.443,34,0
-7,81,78,40,48,46.7,0.261,42,0
-4,134,72,0,0,23.8,0.277,60,1
-2,142,82,18,64,24.7,0.761,21,0
-6,144,72,27,228,33.9,0.255,40,0
-2,92,62,28,0,31.6,0.130,24,0
-1,71,48,18,76,20.4,0.323,22,0
-6,93,50,30,64,28.7,0.356,23,0
-1,122,90,51,220,49.7,0.325,31,1
-1,163,72,0,0,39.0,1.222,33,1
-1,151,60,0,0,26.1,0.179,22,0
-0,125,96,0,0,22.5,0.262,21,0
-1,81,72,18,40,26.6,0.283,24,0
-2,85,65,0,0,39.6,0.930,27,0
-1,126,56,29,152,28.7,0.801,21,0
-1,96,122,0,0,22.4,0.207,27,0
-4,144,58,28,140,29.5,0.287,37,0
-3,83,58,31,18,34.3,0.336,25,0
-0,95,85,25,36,37.4,0.247,24,1
-3,171,72,33,135,33.3,0.199,24,1
-8,155,62,26,495,34.0,0.543,46,1
-1,89,76,34,37,31.2,0.192,23,0
-4,76,62,0,0,34.0,0.391,25,0
-7,160,54,32,175,30.5,0.588,39,1
-4,146,92,0,0,31.2,0.539,61,1
-5,124,74,0,0,34.0,0.220,38,1
-5,78,48,0,0,33.7,0.654,25,0
-4,97,60,23,0,28.2,0.443,22,0
-4,99,76,15,51,23.2,0.223,21,0
-0,162,76,56,100,53.2,0.759,25,1
-6,111,64,39,0,34.2,0.260,24,0
-2,107,74,30,100,33.6,0.404,23,0
-5,132,80,0,0,26.8,0.186,69,0
-0,113,76,0,0,33.3,0.278,23,1
-1,88,30,42,99,55.0,0.496,26,1
-3,120,70,30,135,42.9,0.452,30,0
-1,118,58,36,94,33.3,0.261,23,0
-1,117,88,24,145,34.5,0.403,40,1
-0,105,84,0,0,27.9,0.741,62,1
-4,173,70,14,168,29.7,0.361,33,1
-9,122,56,0,0,33.3,1.114,33,1
-3,170,64,37,225,34.5,0.356,30,1
-8,84,74,31,0,38.3,0.457,39,0
-2,96,68,13,49,21.1,0.647,26,0
-2,125,60,20,140,33.8,0.088,31,0
-0,100,70,26,50,30.8,0.597,21,0
-0,93,60,25,92,28.7,0.532,22,0
-0,129,80,0,0,31.2,0.703,29,0
-5,105,72,29,325,36.9,0.159,28,0
-3,128,78,0,0,21.1,0.268,55,0
-5,106,82,30,0,39.5,0.286,38,0
-2,108,52,26,63,32.5,0.318,22,0
-10,108,66,0,0,32.4,0.272,42,1
-4,154,62,31,284,32.8,0.237,23,0
-0,102,75,23,0,0.0,0.572,21,0
-9,57,80,37,0,32.8,0.096,41,0
-2,106,64,35,119,30.5,1.400,34,0
-5,147,78,0,0,33.7,0.218,65,0
-2,90,70,17,0,27.3,0.085,22,0
-1,136,74,50,204,37.4,0.399,24,0
-4,114,65,0,0,21.9,0.432,37,0
-9,156,86,28,155,34.3,1.189,42,1
-1,153,82,42,485,40.6,0.687,23,0
-8,188,78,0,0,47.9,0.137,43,1
-7,152,88,44,0,50.0,0.337,36,1
-2,99,52,15,94,24.6,0.637,21,0
-1,109,56,21,135,25.2,0.833,23,0
-2,88,74,19,53,29.0,0.229,22,0
-17,163,72,41,114,40.9,0.817,47,1
-4,151,90,38,0,29.7,0.294,36,0
-7,102,74,40,105,37.2,0.204,45,0
-0,114,80,34,285,44.2,0.167,27,0
-2,100,64,23,0,29.7,0.368,21,0
-0,131,88,0,0,31.6,0.743,32,1
-6,104,74,18,156,29.9,0.722,41,1
-3,148,66,25,0,32.5,0.256,22,0
-4,120,68,0,0,29.6,0.709,34,0
-4,110,66,0,0,31.9,0.471,29,0
-3,111,90,12,78,28.4,0.495,29,0
-6,102,82,0,0,30.8,0.180,36,1
-6,134,70,23,130,35.4,0.542,29,1
-2,87,0,23,0,28.9,0.773,25,0
-1,79,60,42,48,43.5,0.678,23,0
-2,75,64,24,55,29.7,0.370,33,0
-8,179,72,42,130,32.7,0.719,36,1
-6,85,78,0,0,31.2,0.382,42,0
-0,129,110,46,130,67.1,0.319,26,1
-5,143,78,0,0,45.0,0.190,47,0
-5,130,82,0,0,39.1,0.956,37,1
-6,87,80,0,0,23.2,0.084,32,0
-0,119,64,18,92,34.9,0.725,23,0
-1,0,74,20,23,27.7,0.299,21,0
-5,73,60,0,0,26.8,0.268,27,0
-4,141,74,0,0,27.6,0.244,40,0
-7,194,68,28,0,35.9,0.745,41,1
-8,181,68,36,495,30.1,0.615,60,1
-1,128,98,41,58,32.0,1.321,33,1
-8,109,76,39,114,27.9,0.640,31,1
-5,139,80,35,160,31.6,0.361,25,1
-3,111,62,0,0,22.6,0.142,21,0
-9,123,70,44,94,33.1,0.374,40,0
-7,159,66,0,0,30.4,0.383,36,1
-11,135,0,0,0,52.3,0.578,40,1
-8,85,55,20,0,24.4,0.136,42,0
-5,158,84,41,210,39.4,0.395,29,1
-1,105,58,0,0,24.3,0.187,21,0
-3,107,62,13,48,22.9,0.678,23,1
-4,109,64,44,99,34.8,0.905,26,1
-4,148,60,27,318,30.9,0.150,29,1
-0,113,80,16,0,31.0,0.874,21,0
-1,138,82,0,0,40.1,0.236,28,0
-0,108,68,20,0,27.3,0.787,32,0
-2,99,70,16,44,20.4,0.235,27,0
-6,103,72,32,190,37.7,0.324,55,0
-5,111,72,28,0,23.9,0.407,27,0
-8,196,76,29,280,37.5,0.605,57,1
-5,162,104,0,0,37.7,0.151,52,1
-1,96,64,27,87,33.2,0.289,21,0
-7,184,84,33,0,35.5,0.355,41,1
-2,81,60,22,0,27.7,0.290,25,0
-0,147,85,54,0,42.8,0.375,24,0
-7,179,95,31,0,34.2,0.164,60,0
-0,140,65,26,130,42.6,0.431,24,1
-9,112,82,32,175,34.2,0.260,36,1
-12,151,70,40,271,41.8,0.742,38,1
-5,109,62,41,129,35.8,0.514,25,1
-6,125,68,30,120,30.0,0.464,32,0
-5,85,74,22,0,29.0,1.224,32,1
-5,112,66,0,0,37.8,0.261,41,1
-0,177,60,29,478,34.6,1.072,21,1
-2,158,90,0,0,31.6,0.805,66,1
-7,119,0,0,0,25.2,0.209,37,0
-7,142,60,33,190,28.8,0.687,61,0
-1,100,66,15,56,23.6,0.666,26,0
-1,87,78,27,32,34.6,0.101,22,0
-0,101,76,0,0,35.7,0.198,26,0
-3,162,52,38,0,37.2,0.652,24,1
-4,197,70,39,744,36.7,2.329,31,0
-0,117,80,31,53,45.2,0.089,24,0
-4,142,86,0,0,44.0,0.645,22,1
-6,134,80,37,370,46.2,0.238,46,1
-1,79,80,25,37,25.4,0.583,22,0
-4,122,68,0,0,35.0,0.394,29,0
-3,74,68,28,45,29.7,0.293,23,0
-4,171,72,0,0,43.6,0.479,26,1
-7,181,84,21,192,35.9,0.586,51,1
-0,179,90,27,0,44.1,0.686,23,1
-9,164,84,21,0,30.8,0.831,32,1
-0,104,76,0,0,18.4,0.582,27,0
-1,91,64,24,0,29.2,0.192,21,0
-4,91,70,32,88,33.1,0.446,22,0
-3,139,54,0,0,25.6,0.402,22,1
-6,119,50,22,176,27.1,1.318,33,1
-2,146,76,35,194,38.2,0.329,29,0
-9,184,85,15,0,30.0,1.213,49,1
-10,122,68,0,0,31.2,0.258,41,0
-0,165,90,33,680,52.3,0.427,23,0
-9,124,70,33,402,35.4,0.282,34,0
-1,111,86,19,0,30.1,0.143,23,0
-9,106,52,0,0,31.2,0.380,42,0
-2,129,84,0,0,28.0,0.284,27,0
-2,90,80,14,55,24.4,0.249,24,0
-0,86,68,32,0,35.8,0.238,25,0
-12,92,62,7,258,27.6,0.926,44,1
-1,113,64,35,0,33.6,0.543,21,1
-3,111,56,39,0,30.1,0.557,30,0
-2,114,68,22,0,28.7,0.092,25,0
-1,193,50,16,375,25.9,0.655,24,0
-11,155,76,28,150,33.3,1.353,51,1
-3,191,68,15,130,30.9,0.299,34,0
-3,141,0,0,0,30.0,0.761,27,1
-4,95,70,32,0,32.1,0.612,24,0
-3,142,80,15,0,32.4,0.200,63,0
-4,123,62,0,0,32.0,0.226,35,1
-5,96,74,18,67,33.6,0.997,43,0
-0,138,0,0,0,36.3,0.933,25,1
-2,128,64,42,0,40.0,1.101,24,0
-0,102,52,0,0,25.1,0.078,21,0
-2,146,0,0,0,27.5,0.240,28,1
-10,101,86,37,0,45.6,1.136,38,1
-2,108,62,32,56,25.2,0.128,21,0
-3,122,78,0,0,23.0,0.254,40,0
-1,71,78,50,45,33.2,0.422,21,0
-13,106,70,0,0,34.2,0.251,52,0
-2,100,70,52,57,40.5,0.677,25,0
-7,106,60,24,0,26.5,0.296,29,1
-0,104,64,23,116,27.8,0.454,23,0
-5,114,74,0,0,24.9,0.744,57,0
-2,108,62,10,278,25.3,0.881,22,0
-0,146,70,0,0,37.9,0.334,28,1
-10,129,76,28,122,35.9,0.280,39,0
-7,133,88,15,155,32.4,0.262,37,0
-7,161,86,0,0,30.4,0.165,47,1
-2,108,80,0,0,27.0,0.259,52,1
-7,136,74,26,135,26.0,0.647,51,0
-5,155,84,44,545,38.7,0.619,34,0
-1,119,86,39,220,45.6,0.808,29,1
-4,96,56,17,49,20.8,0.340,26,0
-5,108,72,43,75,36.1,0.263,33,0
-0,78,88,29,40,36.9,0.434,21,0
-0,107,62,30,74,36.6,0.757,25,1
-2,128,78,37,182,43.3,1.224,31,1
-1,128,48,45,194,40.5,0.613,24,1
-0,161,50,0,0,21.9,0.254,65,0
-6,151,62,31,120,35.5,0.692,28,0
-2,146,70,38,360,28.0,0.337,29,1
-0,126,84,29,215,30.7,0.520,24,0
-14,100,78,25,184,36.6,0.412,46,1
-8,112,72,0,0,23.6,0.840,58,0
-0,167,0,0,0,32.3,0.839,30,1
-2,144,58,33,135,31.6,0.422,25,1
-5,77,82,41,42,35.8,0.156,35,0
-5,115,98,0,0,52.9,0.209,28,1
-3,150,76,0,0,21.0,0.207,37,0
-2,120,76,37,105,39.7,0.215,29,0
-10,161,68,23,132,25.5,0.326,47,1
-0,137,68,14,148,24.8,0.143,21,0
-0,128,68,19,180,30.5,1.391,25,1
-2,124,68,28,205,32.9,0.875,30,1
-6,80,66,30,0,26.2,0.313,41,0
-0,106,70,37,148,39.4,0.605,22,0
-2,155,74,17,96,26.6,0.433,27,1
-3,113,50,10,85,29.5,0.626,25,0
-7,109,80,31,0,35.9,1.127,43,1
-2,112,68,22,94,34.1,0.315,26,0
-3,99,80,11,64,19.3,0.284,30,0
-3,182,74,0,0,30.5,0.345,29,1
-3,115,66,39,140,38.1,0.150,28,0
-6,194,78,0,0,23.5,0.129,59,1
-4,129,60,12,231,27.5,0.527,31,0
-3,112,74,30,0,31.6,0.197,25,1
-0,124,70,20,0,27.4,0.254,36,1
-13,152,90,33,29,26.8,0.731,43,1
-2,112,75,32,0,35.7,0.148,21,0
-1,157,72,21,168,25.6,0.123,24,0
-1,122,64,32,156,35.1,0.692,30,1
-10,179,70,0,0,35.1,0.200,37,0
-2,102,86,36,120,45.5,0.127,23,1
-6,105,70,32,68,30.8,0.122,37,0
-8,118,72,19,0,23.1,1.476,46,0
-2,87,58,16,52,32.7,0.166,25,0
-1,180,0,0,0,43.3,0.282,41,1
-12,106,80,0,0,23.6,0.137,44,0
-1,95,60,18,58,23.9,0.260,22,0
-0,165,76,43,255,47.9,0.259,26,0
-0,117,0,0,0,33.8,0.932,44,0
-5,115,76,0,0,31.2,0.343,44,1
-9,152,78,34,171,34.2,0.893,33,1
-7,178,84,0,0,39.9,0.331,41,1
-1,130,70,13,105,25.9,0.472,22,0
-1,95,74,21,73,25.9,0.673,36,0
-1,0,68,35,0,32.0,0.389,22,0
-5,122,86,0,0,34.7,0.290,33,0
-8,95,72,0,0,36.8,0.485,57,0
-8,126,88,36,108,38.5,0.349,49,0
-1,139,46,19,83,28.7,0.654,22,0
-3,116,0,0,0,23.5,0.187,23,0
-3,99,62,19,74,21.8,0.279,26,0
-5,0,80,32,0,41.0,0.346,37,1
-4,92,80,0,0,42.2,0.237,29,0
-4,137,84,0,0,31.2,0.252,30,0
-3,61,82,28,0,34.4,0.243,46,0
-1,90,62,12,43,27.2,0.580,24,0
-3,90,78,0,0,42.7,0.559,21,0
-9,165,88,0,0,30.4,0.302,49,1
-1,125,50,40,167,33.3,0.962,28,1
-13,129,0,30,0,39.9,0.569,44,1
-12,88,74,40,54,35.3,0.378,48,0
-1,196,76,36,249,36.5,0.875,29,1
-5,189,64,33,325,31.2,0.583,29,1
-5,158,70,0,0,29.8,0.207,63,0
-5,103,108,37,0,39.2,0.305,65,0
-4,146,78,0,0,38.5,0.520,67,1
-4,147,74,25,293,34.9,0.385,30,0
-5,99,54,28,83,34.0,0.499,30,0
-6,124,72,0,0,27.6,0.368,29,1
-0,101,64,17,0,21.0,0.252,21,0
-3,81,86,16,66,27.5,0.306,22,0
-1,133,102,28,140,32.8,0.234,45,1
-3,173,82,48,465,38.4,2.137,25,1
-0,118,64,23,89,0.0,1.731,21,0
-0,84,64,22,66,35.8,0.545,21,0
-2,105,58,40,94,34.9,0.225,25,0
-2,122,52,43,158,36.2,0.816,28,0
-12,140,82,43,325,39.2,0.528,58,1
-0,98,82,15,84,25.2,0.299,22,0
-1,87,60,37,75,37.2,0.509,22,0
-4,156,75,0,0,48.3,0.238,32,1
-0,93,100,39,72,43.4,1.021,35,0
-1,107,72,30,82,30.8,0.821,24,0
-0,105,68,22,0,20.0,0.236,22,0
-1,109,60,8,182,25.4,0.947,21,0
-1,90,62,18,59,25.1,1.268,25,0
-1,125,70,24,110,24.3,0.221,25,0
-1,119,54,13,50,22.3,0.205,24,0
-5,116,74,29,0,32.3,0.660,35,1
-8,105,100,36,0,43.3,0.239,45,1
-5,144,82,26,285,32.0,0.452,58,1
-3,100,68,23,81,31.6,0.949,28,0
-1,100,66,29,196,32.0,0.444,42,0
-5,166,76,0,0,45.7,0.340,27,1
-1,131,64,14,415,23.7,0.389,21,0
-4,116,72,12,87,22.1,0.463,37,0
-4,158,78,0,0,32.9,0.803,31,1
-2,127,58,24,275,27.7,1.600,25,0
-3,96,56,34,115,24.7,0.944,39,0
-0,131,66,40,0,34.3,0.196,22,1
-3,82,70,0,0,21.1,0.389,25,0
-3,193,70,31,0,34.9,0.241,25,1
-4,95,64,0,0,32.0,0.161,31,1
-6,137,61,0,0,24.2,0.151,55,0
-5,136,84,41,88,35.0,0.286,35,1
-9,72,78,25,0,31.6,0.280,38,0
-5,168,64,0,0,32.9,0.135,41,1
-2,123,48,32,165,42.1,0.520,26,0
-4,115,72,0,0,28.9,0.376,46,1
-0,101,62,0,0,21.9,0.336,25,0
-8,197,74,0,0,25.9,1.191,39,1
-1,172,68,49,579,42.4,0.702,28,1
-6,102,90,39,0,35.7,0.674,28,0
-1,112,72,30,176,34.4,0.528,25,0
-1,143,84,23,310,42.4,1.076,22,0
-1,143,74,22,61,26.2,0.256,21,0
-0,138,60,35,167,34.6,0.534,21,1
-3,173,84,33,474,35.7,0.258,22,1
-1,97,68,21,0,27.2,1.095,22,0
-4,144,82,32,0,38.5,0.554,37,1
-1,83,68,0,0,18.2,0.624,27,0
-3,129,64,29,115,26.4,0.219,28,1
-1,119,88,41,170,45.3,0.507,26,0
-2,94,68,18,76,26.0,0.561,21,0
-0,102,64,46,78,40.6,0.496,21,0
-2,115,64,22,0,30.8,0.421,21,0
-8,151,78,32,210,42.9,0.516,36,1
-4,184,78,39,277,37.0,0.264,31,1
-0,94,0,0,0,0.0,0.256,25,0
-1,181,64,30,180,34.1,0.328,38,1
-0,135,94,46,145,40.6,0.284,26,0
-1,95,82,25,180,35.0,0.233,43,1
-2,99,0,0,0,22.2,0.108,23,0
-3,89,74,16,85,30.4,0.551,38,0
-1,80,74,11,60,30.0,0.527,22,0
-2,139,75,0,0,25.6,0.167,29,0
-1,90,68,8,0,24.5,1.138,36,0
-0,141,0,0,0,42.4,0.205,29,1
-12,140,85,33,0,37.4,0.244,41,0
-5,147,75,0,0,29.9,0.434,28,0
-1,97,70,15,0,18.2,0.147,21,0
-6,107,88,0,0,36.8,0.727,31,0
-0,189,104,25,0,34.3,0.435,41,1
-2,83,66,23,50,32.2,0.497,22,0
-4,117,64,27,120,33.2,0.230,24,0
-8,108,70,0,0,30.5,0.955,33,1
-4,117,62,12,0,29.7,0.380,30,1
-0,180,78,63,14,59.4,2.420,25,1
-1,100,72,12,70,25.3,0.658,28,0
-0,95,80,45,92,36.5,0.330,26,0
-0,104,64,37,64,33.6,0.510,22,1
-0,120,74,18,63,30.5,0.285,26,0
-1,82,64,13,95,21.2,0.415,23,0
-2,134,70,0,0,28.9,0.542,23,1
-0,91,68,32,210,39.9,0.381,25,0
-2,119,0,0,0,19.6,0.832,72,0
-2,100,54,28,105,37.8,0.498,24,0
-14,175,62,30,0,33.6,0.212,38,1
-1,135,54,0,0,26.7,0.687,62,0
-5,86,68,28,71,30.2,0.364,24,0
-10,148,84,48,237,37.6,1.001,51,1
-9,134,74,33,60,25.9,0.460,81,0
-9,120,72,22,56,20.8,0.733,48,0
-1,71,62,0,0,21.8,0.416,26,0
-8,74,70,40,49,35.3,0.705,39,0
-5,88,78,30,0,27.6,0.258,37,0
-10,115,98,0,0,24.0,1.022,34,0
-0,124,56,13,105,21.8,0.452,21,0
-0,74,52,10,36,27.8,0.269,22,0
-0,97,64,36,100,36.8,0.600,25,0
-8,120,0,0,0,30.0,0.183,38,1
-6,154,78,41,140,46.1,0.571,27,0
-1,144,82,40,0,41.3,0.607,28,0
-0,137,70,38,0,33.2,0.170,22,0
-0,119,66,27,0,38.8,0.259,22,0
-7,136,90,0,0,29.9,0.210,50,0
-4,114,64,0,0,28.9,0.126,24,0
-0,137,84,27,0,27.3,0.231,59,0
-2,105,80,45,191,33.7,0.711,29,1
-7,114,76,17,110,23.8,0.466,31,0
-8,126,74,38,75,25.9,0.162,39,0
-4,132,86,31,0,28.0,0.419,63,0
-3,158,70,30,328,35.5,0.344,35,1
-0,123,88,37,0,35.2,0.197,29,0
-4,85,58,22,49,27.8,0.306,28,0
-0,84,82,31,125,38.2,0.233,23,0
-0,145,0,0,0,44.2,0.630,31,1
-0,135,68,42,250,42.3,0.365,24,1
-1,139,62,41,480,40.7,0.536,21,0
-0,173,78,32,265,46.5,1.159,58,0
-4,99,72,17,0,25.6,0.294,28,0
-8,194,80,0,0,26.1,0.551,67,0
-2,83,65,28,66,36.8,0.629,24,0
-2,89,90,30,0,33.5,0.292,42,0
-4,99,68,38,0,32.8,0.145,33,0
-4,125,70,18,122,28.9,1.144,45,1
-3,80,0,0,0,0.0,0.174,22,0
-6,166,74,0,0,26.6,0.304,66,0
-5,110,68,0,0,26.0,0.292,30,0
-2,81,72,15,76,30.1,0.547,25,0
-7,195,70,33,145,25.1,0.163,55,1
-6,154,74,32,193,29.3,0.839,39,0
-2,117,90,19,71,25.2,0.313,21,0
-3,84,72,32,0,37.2,0.267,28,0
-6,0,68,41,0,39.0,0.727,41,1
-7,94,64,25,79,33.3,0.738,41,0
-3,96,78,39,0,37.3,0.238,40,0
-10,75,82,0,0,33.3,0.263,38,0
-0,180,90,26,90,36.5,0.314,35,1
-1,130,60,23,170,28.6,0.692,21,0
-2,84,50,23,76,30.4,0.968,21,0
-8,120,78,0,0,25.0,0.409,64,0
-12,84,72,31,0,29.7,0.297,46,1
-0,139,62,17,210,22.1,0.207,21,0
-9,91,68,0,0,24.2,0.200,58,0
-2,91,62,0,0,27.3,0.525,22,0
-3,99,54,19,86,25.6,0.154,24,0
-3,163,70,18,105,31.6,0.268,28,1
-9,145,88,34,165,30.3,0.771,53,1
-7,125,86,0,0,37.6,0.304,51,0
-13,76,60,0,0,32.8,0.180,41,0
-6,129,90,7,326,19.6,0.582,60,0
-2,68,70,32,66,25.0,0.187,25,0
-3,124,80,33,130,33.2,0.305,26,0
-6,114,0,0,0,0.0,0.189,26,0
-9,130,70,0,0,34.2,0.652,45,1
-3,125,58,0,0,31.6,0.151,24,0
-3,87,60,18,0,21.8,0.444,21,0
-1,97,64,19,82,18.2,0.299,21,0
-3,116,74,15,105,26.3,0.107,24,0
-0,117,66,31,188,30.8,0.493,22,0
-0,111,65,0,0,24.6,0.660,31,0
-2,122,60,18,106,29.8,0.717,22,0
-0,107,76,0,0,45.3,0.686,24,0
-1,86,66,52,65,41.3,0.917,29,0
-6,91,0,0,0,29.8,0.501,31,0
-1,77,56,30,56,33.3,1.251,24,0
-4,132,0,0,0,32.9,0.302,23,1
-0,105,90,0,0,29.6,0.197,46,0
-0,57,60,0,0,21.7,0.735,67,0
-0,127,80,37,210,36.3,0.804,23,0
-3,129,92,49,155,36.4,0.968,32,1
-8,100,74,40,215,39.4,0.661,43,1
-3,128,72,25,190,32.4,0.549,27,1
-10,90,85,32,0,34.9,0.825,56,1
-4,84,90,23,56,39.5,0.159,25,0
-1,88,78,29,76,32.0,0.365,29,0
-8,186,90,35,225,34.5,0.423,37,1
-5,187,76,27,207,43.6,1.034,53,1
-4,131,68,21,166,33.1,0.160,28,0
-1,164,82,43,67,32.8,0.341,50,0
-4,189,110,31,0,28.5,0.680,37,0
-1,116,70,28,0,27.4,0.204,21,0
-3,84,68,30,106,31.9,0.591,25,0
-6,114,88,0,0,27.8,0.247,66,0
-1,88,62,24,44,29.9,0.422,23,0
-1,84,64,23,115,36.9,0.471,28,0
-7,124,70,33,215,25.5,0.161,37,0
-1,97,70,40,0,38.1,0.218,30,0
-8,110,76,0,0,27.8,0.237,58,0
-11,103,68,40,0,46.2,0.126,42,0
-11,85,74,0,0,30.1,0.300,35,0
-6,125,76,0,0,33.8,0.121,54,1
-0,198,66,32,274,41.3,0.502,28,1
-1,87,68,34,77,37.6,0.401,24,0
-6,99,60,19,54,26.9,0.497,32,0
-0,91,80,0,0,32.4,0.601,27,0
-2,95,54,14,88,26.1,0.748,22,0
-1,99,72,30,18,38.6,0.412,21,0
-6,92,62,32,126,32.0,0.085,46,0
-4,154,72,29,126,31.3,0.338,37,0
-0,121,66,30,165,34.3,0.203,33,1
-3,78,70,0,0,32.5,0.270,39,0
-2,130,96,0,0,22.6,0.268,21,0
-3,111,58,31,44,29.5,0.430,22,0
-2,98,60,17,120,34.7,0.198,22,0
-1,143,86,30,330,30.1,0.892,23,0
-1,119,44,47,63,35.5,0.280,25,0
-6,108,44,20,130,24.0,0.813,35,0
-2,118,80,0,0,42.9,0.693,21,1
-10,133,68,0,0,27.0,0.245,36,0
-2,197,70,99,0,34.7,0.575,62,1
-0,151,90,46,0,42.1,0.371,21,1
-6,109,60,27,0,25.0,0.206,27,0
-12,121,78,17,0,26.5,0.259,62,0
-8,100,76,0,0,38.7,0.190,42,0
-8,124,76,24,600,28.7,0.687,52,1
-1,93,56,11,0,22.5,0.417,22,0
-8,143,66,0,0,34.9,0.129,41,1
-6,103,66,0,0,24.3,0.249,29,0
-3,176,86,27,156,33.3,1.154,52,1
-0,73,0,0,0,21.1,0.342,25,0
-11,111,84,40,0,46.8,0.925,45,1
-2,112,78,50,140,39.4,0.175,24,0
-3,132,80,0,0,34.4,0.402,44,1
-2,82,52,22,115,28.5,1.699,25,0
-6,123,72,45,230,33.6,0.733,34,0
-0,188,82,14,185,32.0,0.682,22,1
-0,67,76,0,0,45.3,0.194,46,0
-1,89,24,19,25,27.8,0.559,21,0
-1,173,74,0,0,36.8,0.088,38,1
-1,109,38,18,120,23.1,0.407,26,0
-1,108,88,19,0,27.1,0.400,24,0
-6,96,0,0,0,23.7,0.190,28,0
-1,124,74,36,0,27.8,0.100,30,0
-7,150,78,29,126,35.2,0.692,54,1
-4,183,0,0,0,28.4,0.212,36,1
-1,124,60,32,0,35.8,0.514,21,0
-1,181,78,42,293,40.0,1.258,22,1
-1,92,62,25,41,19.5,0.482,25,0
-0,152,82,39,272,41.5,0.270,27,0
-1,111,62,13,182,24.0,0.138,23,0
-3,106,54,21,158,30.9,0.292,24,0
-3,174,58,22,194,32.9,0.593,36,1
-7,168,88,42,321,38.2,0.787,40,1
-6,105,80,28,0,32.5,0.878,26,0
-11,138,74,26,144,36.1,0.557,50,1
-3,106,72,0,0,25.8,0.207,27,0
-6,117,96,0,0,28.7,0.157,30,0
-2,68,62,13,15,20.1,0.257,23,0
-9,112,82,24,0,28.2,1.282,50,1
-0,119,0,0,0,32.4,0.141,24,1
-2,112,86,42,160,38.4,0.246,28,0
-2,92,76,20,0,24.2,1.698,28,0
-6,183,94,0,0,40.8,1.461,45,0
-0,94,70,27,115,43.5,0.347,21,0
-2,108,64,0,0,30.8,0.158,21,0
-4,90,88,47,54,37.7,0.362,29,0
-0,125,68,0,0,24.7,0.206,21,0
-0,132,78,0,0,32.4,0.393,21,0
-5,128,80,0,0,34.6,0.144,45,0
-4,94,65,22,0,24.7,0.148,21,0
-7,114,64,0,0,27.4,0.732,34,1
-0,102,78,40,90,34.5,0.238,24,0
-2,111,60,0,0,26.2,0.343,23,0
-1,128,82,17,183,27.5,0.115,22,0
-10,92,62,0,0,25.9,0.167,31,0
-13,104,72,0,0,31.2,0.465,38,1
-5,104,74,0,0,28.8,0.153,48,0
-2,94,76,18,66,31.6,0.649,23,0
-7,97,76,32,91,40.9,0.871,32,1
-1,100,74,12,46,19.5,0.149,28,0
-0,102,86,17,105,29.3,0.695,27,0
-4,128,70,0,0,34.3,0.303,24,0
-6,147,80,0,0,29.5,0.178,50,1
-4,90,0,0,0,28.0,0.610,31,0
-3,103,72,30,152,27.6,0.730,27,0
-2,157,74,35,440,39.4,0.134,30,0
-1,167,74,17,144,23.4,0.447,33,1
-0,179,50,36,159,37.8,0.455,22,1
-11,136,84,35,130,28.3,0.260,42,1
-0,107,60,25,0,26.4,0.133,23,0
-1,91,54,25,100,25.2,0.234,23,0
-1,117,60,23,106,33.8,0.466,27,0
-5,123,74,40,77,34.1,0.269,28,0
-2,120,54,0,0,26.8,0.455,27,0
-1,106,70,28,135,34.2,0.142,22,0
-2,155,52,27,540,38.7,0.240,25,1
-2,101,58,35,90,21.8,0.155,22,0
-1,120,80,48,200,38.9,1.162,41,0
-11,127,106,0,0,39.0,0.190,51,0
-3,80,82,31,70,34.2,1.292,27,1
-10,162,84,0,0,27.7,0.182,54,0
-1,199,76,43,0,42.9,1.394,22,1
-8,167,106,46,231,37.6,0.165,43,1
-9,145,80,46,130,37.9,0.637,40,1
-6,115,60,39,0,33.7,0.245,40,1
-1,112,80,45,132,34.8,0.217,24,0
-4,145,82,18,0,32.5,0.235,70,1
-10,111,70,27,0,27.5,0.141,40,1
-6,98,58,33,190,34.0,0.430,43,0
-9,154,78,30,100,30.9,0.164,45,0
-6,165,68,26,168,33.6,0.631,49,0
-1,99,58,10,0,25.4,0.551,21,0
-10,68,106,23,49,35.5,0.285,47,0
-3,123,100,35,240,57.3,0.880,22,0
-8,91,82,0,0,35.6,0.587,68,0
-6,195,70,0,0,30.9,0.328,31,1
-9,156,86,0,0,24.8,0.230,53,1
-0,93,60,0,0,35.3,0.263,25,0
-3,121,52,0,0,36.0,0.127,25,1
-2,101,58,17,265,24.2,0.614,23,0
-2,56,56,28,45,24.2,0.332,22,0
-0,162,76,36,0,49.6,0.364,26,1
-0,95,64,39,105,44.6,0.366,22,0
-4,125,80,0,0,32.3,0.536,27,1
-5,136,82,0,0,0.0,0.640,69,0
-2,129,74,26,205,33.2,0.591,25,0
-3,130,64,0,0,23.1,0.314,22,0
-1,107,50,19,0,28.3,0.181,29,0
-1,140,74,26,180,24.1,0.828,23,0
-1,144,82,46,180,46.1,0.335,46,1
-8,107,80,0,0,24.6,0.856,34,0
-13,158,114,0,0,42.3,0.257,44,1
-2,121,70,32,95,39.1,0.886,23,0
-7,129,68,49,125,38.5,0.439,43,1
-2,90,60,0,0,23.5,0.191,25,0
-7,142,90,24,480,30.4,0.128,43,1
-3,169,74,19,125,29.9,0.268,31,1
-0,99,0,0,0,25.0,0.253,22,0
-4,127,88,11,155,34.5,0.598,28,0
-4,118,70,0,0,44.5,0.904,26,0
-2,122,76,27,200,35.9,0.483,26,0
-6,125,78,31,0,27.6,0.565,49,1
-1,168,88,29,0,35.0,0.905,52,1
-2,129,0,0,0,38.5,0.304,41,0
-4,110,76,20,100,28.4,0.118,27,0
-6,80,80,36,0,39.8,0.177,28,0
-10,115,0,0,0,0.0,0.261,30,1
-2,127,46,21,335,34.4,0.176,22,0
-9,164,78,0,0,32.8,0.148,45,1
-2,93,64,32,160,38.0,0.674,23,1
-3,158,64,13,387,31.2,0.295,24,0
-5,126,78,27,22,29.6,0.439,40,0
-10,129,62,36,0,41.2,0.441,38,1
-0,134,58,20,291,26.4,0.352,21,0
-3,102,74,0,0,29.5,0.121,32,0
-7,187,50,33,392,33.9,0.826,34,1
-3,173,78,39,185,33.8,0.970,31,1
-10,94,72,18,0,23.1,0.595,56,0
-1,108,60,46,178,35.5,0.415,24,0
-5,97,76,27,0,35.6,0.378,52,1
-4,83,86,19,0,29.3,0.317,34,0
-1,114,66,36,200,38.1,0.289,21,0
-1,149,68,29,127,29.3,0.349,42,1
-5,117,86,30,105,39.1,0.251,42,0
-1,111,94,0,0,32.8,0.265,45,0
-4,112,78,40,0,39.4,0.236,38,0
-1,116,78,29,180,36.1,0.496,25,0
-0,141,84,26,0,32.4,0.433,22,0
-2,175,88,0,0,22.9,0.326,22,0
-2,92,52,0,0,30.1,0.141,22,0
-3,130,78,23,79,28.4,0.323,34,1
-8,120,86,0,0,28.4,0.259,22,1
-2,174,88,37,120,44.5,0.646,24,1
-2,106,56,27,165,29.0,0.426,22,0
-2,105,75,0,0,23.3,0.560,53,0
-4,95,60,32,0,35.4,0.284,28,0
-0,126,86,27,120,27.4,0.515,21,0
-8,65,72,23,0,32.0,0.600,42,0
-2,99,60,17,160,36.6,0.453,21,0
-1,102,74,0,0,39.5,0.293,42,1
-11,120,80,37,150,42.3,0.785,48,1
-3,102,44,20,94,30.8,0.400,26,0
-1,109,58,18,116,28.5,0.219,22,0
-9,140,94,0,0,32.7,0.734,45,1
-13,153,88,37,140,40.6,1.174,39,0
-12,100,84,33,105,30.0,0.488,46,0
-1,147,94,41,0,49.3,0.358,27,1
-1,81,74,41,57,46.3,1.096,32,0
-3,187,70,22,200,36.4,0.408,36,1
-6,162,62,0,0,24.3,0.178,50,1
-4,136,70,0,0,31.2,1.182,22,1
-1,121,78,39,74,39.0,0.261,28,0
-3,108,62,24,0,26.0,0.223,25,0
-0,181,88,44,510,43.3,0.222,26,1
-8,154,78,32,0,32.4,0.443,45,1
-1,128,88,39,110,36.5,1.057,37,1
-7,137,90,41,0,32.0,0.391,39,0
-0,123,72,0,0,36.3,0.258,52,1
-1,106,76,0,0,37.5,0.197,26,0
-6,190,92,0,0,35.5,0.278,66,1
-2,88,58,26,16,28.4,0.766,22,0
-9,170,74,31,0,44.0,0.403,43,1
-9,89,62,0,0,22.5,0.142,33,0
-10,101,76,48,180,32.9,0.171,63,0
-2,122,70,27,0,36.8,0.340,27,0
-5,121,72,23,112,26.2,0.245,30,0
-1,126,60,0,0,30.1,0.349,47,1
-1,93,70,31,0,30.4,0.315,23,0
\ No newline at end of file
